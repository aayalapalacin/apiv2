{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":""},{"location":"#working-inside-docker-slower","title":"Working inside Docker (slower)","text":""},{"location":"#build-breathecode-dev-docker-image","title":"<code>Build BreatheCode Dev docker image</code>","text":"<p>Install docker desktop in your Windows, else find a guide to install Docker and Docker Compose in your linux distribution <code>uname -a</code>.</p> <pre><code># Check which dependencies you need install in your operating system\npython -m scripts.doctor\n\n# Generate the BreatheCode Dev docker image\ndocker-compose build bc-dev\n</code></pre>"},{"location":"#testing-inside-breathecode-dev","title":"<code>Testing inside BreatheCode Dev</code>","text":"<pre><code># Open the BreatheCode Dev, this shell don't export the port 8000\ndocker-compose run bc-dev fish\n\n# Testing\npipenv run test ./breathecode/activity  # path\n# Testing in parallel\npipenv run ptest ./breathecode/activity  # path\n# Coverage\npipenv run cov breathecode.activity  # python module path\n# Coverage in parallel\npipenv run pcov breathecode.activity  # python module path\n</code></pre>"},{"location":"#run-breathecode-api-as-docker-service","title":"<code>Run BreatheCode API as docker service</code>","text":"<pre><code># open BreatheCode API as a service and export the port 8000\ndocker-compose up -d bc-dev\n\n# open the BreatheCode Dev, this shell don't export the port 8000\ndocker-compose run bc-dev fish\n\n# create super user\npipenv run python manage.py createsuperuser\n\n# Close the BreatheCode Dev\nexit\n# See the output of Django\ndocker-compose logs -f bc-dev\n\n# open localhost:8000 to view the api\n# open localhost:8000/admin to view the admin\n</code></pre>"},{"location":"#working-in-your-local-machine-recomended","title":"Working in your local machine (recomended)","text":""},{"location":"#installation-in-your-local-machine","title":"<code>Installation in your local machine</code>","text":"<p>Install docker desktop in your Windows, else find a guide to install Docker and Docker Compose in your linux distribution <code>uname -a</code>.</p> <pre><code># Check which dependencies you need install in your operating system\npython -m scripts.doctor\n\n# Setting up the redis and postgres database, you also can install manually in your local machine this databases\ndocker-compose up -d redis postgres\n\n# Install and setting up your development environment (this command replace your .env file)\npython -m scripts.install\n</code></pre>"},{"location":"#testing-in-your-local-machine","title":"<code>Testing in your local machine</code>","text":"<pre><code># Testing\npipenv run test ./breathecode/activity  # path\n# Testing in parallel\npipenv run ptest ./breathecode/activity  # path\n# Coverage\npipenv run cov breathecode.activity  # python module path\n# Coverage in parallel\npipenv run pcov breathecode.activity  # python module path\n</code></pre>"},{"location":"#run-breathecode-api-in-your-local-machine","title":"<code>Run BreatheCode API in your local machine</code>","text":"<pre><code># Collect statics\npipenv run python manage.py collectstatic --noinput\n\n# Run migrations\npipenv run python manage.py migrate\n\n# Load fixtures (populate the database)\npipenv run python manage.py loaddata breathecode/*/fixtures/dev_*.json\n\n# Create super user\npipenv run python manage.py createsuperuser\n\n# Run server\npipenv run start\n\n# open localhost:8000 to view the api\n# open localhost:8000/admin to view the admin\n</code></pre>"},{"location":"endponts/","title":"Enpoints Documentation","text":"<ul> <li>Postman</li> <li>OpenApi</li> </ul>"},{"location":"apps/activities/","title":"Activities","text":""},{"location":"apps/activities/#activity-api","title":"Activity API","text":"<p>This API uses Google DataStore as storage, there is not local storage on Heroku or Postgres.</p> <p>We need Google DataStore because we plan to store huge amounts of activities that the user can do inside breathecode.</p> <p>Possible activities (so far): <pre><code>\"breathecode_login\" //every time it logs in\n\"online_platform_registration\" //first day using breathecode\n\"public_event_attendance\" //attendy on an eventbrite event\n\"classroom_attendance\" //when the student attent to class\n\"classroom_unattendance\" //when the student miss class\n\"lesson_opened\" //when a lessons is opened on the platform\n\"office_attendance\" //when the office raspberry pi detects the student\n\"nps_survey_answered\" //when a nps survey is answered by the student\n\"exercise_success\" //when student successfully tests exercise\n</code></pre></p> <p>Any activity has the following inputs:</p> <pre><code>    'cohort',\n    'data',\n    'day',\n    'slug',\n    'user_agent',\n</code></pre>"},{"location":"apps/activities/#endpoints-for-the-user","title":"Endpoints for the user","text":"<p>Get recent user activity <pre><code>GET: activity/user/{email_or_id}?slug=activity_slug\n</code></pre></p> <p>Add a new user activity (requires authentication) <pre><code>POST: activity/user/{email_or_id}\n{\n    'slug' =&gt; 'activity_slug',\n    'data' =&gt; 'any aditional data (string or json-encoded-string)'\n}\n\n\ud83d\udca1 Node: You can pass the cohort in the data json object and it will be possible to filter on the activity graph like this:\n\n{\n    'slug' =&gt; 'activity_slug',\n    'data' =&gt; \"{ \\\"cohort\\\": \\\"mdc-iii\\\" }\" (json encoded string with the cohort id)\n}\n</code></pre></p> <p>Endpoints for the Cohort</p> <p>Get recent user activity <pre><code>GET: activity/cohort/{slug_or_id}?slug=activity_slug\n</code></pre> Endpoints for the coding_error's <pre><code>Get recent user coding_errors\nGET: activity/coding_error/{email_or_id}?slug=activity_slug\n</code></pre> <pre><code>Add a new coding_error (requires authentication)\nPOST: activity/coding_error/\n\n{\n    \"user_id\" =&gt; \"my@email.com\",\n    \"slug\" =&gt; \"webpack_error\",\n    \"data\" =&gt; \"optional additional information about the error\",\n    \"message\" =&gt; \"file not found\",\n    \"name\" =&gt; \"module-not-found,\n    \"severity\" =&gt; \"900\",\n    \"details\" =&gt; \"stack trace for the error as string\"\n}\n</code></pre></p>"},{"location":"apps/admissions/","title":"BreatheCode.Admissions","text":"<p>This module take care of the academic side of breathecode: Students, Cohorts, Course (aka: Certificate), Syllabus, etc. These are some of the things you can do with the breathecode.admissions API:</p> <ol> <li>Manage Academies (BreatheCode let's you divide the academic operations into several academies normally based on territory, for example: 4Geeks Academy Miami vs 4Geeks Academy Madrid).</li> <li>Manage Academy Staff: There are multiple roles surroing an academy, here you can invite users to one or many academies and assign them roles based on their responsabilities.</li> <li>Manage Students (invite and delete students).</li> <li>Manage Cohorts: Every new batch of students that starts in a classroom with a start and end date is called a \"Cohort\".</li> </ol> <p>TODO: finish this documentation.</p>"},{"location":"apps/admissions/#commands","title":"Commands","text":""},{"location":"apps/admissions/#sync-academies","title":"Sync academies","text":"<pre><code>python manage.py sync_admissions academies\n</code></pre> <p>Override previous academies <pre><code>python manage.py sync_admissions academies --override\n</code></pre></p>"},{"location":"apps/admissions/#sync-courses","title":"Sync courses","text":"<pre><code>python manage.py sync_admissions certificates\n</code></pre>"},{"location":"apps/admissions/#sync-cohorts","title":"Sync cohorts","text":"<pre><code>python manage.py sync_admissions cohorts\n</code></pre>"},{"location":"apps/admissions/#sync-students","title":"Sync students","text":"<p><pre><code>python manage.py sync_admissions students --limit=3\n</code></pre> Limit: the number of students to sync</p>"},{"location":"apps/monitoring/introduction/","title":"Intro to monitoring","text":"<p>This app is ideal for running diagnostic and reminders on the breathecode platform.</p>"},{"location":"apps/monitoring/introduction/#installation","title":"Installation","text":"<ul> <li> <p>Setup the monitor app job for once a day, this is the command: <pre><code>$ python manage.py monitor apps\n</code></pre></p> </li> <li> <p>Setup the monitor script job for once a day, this is the command: <pre><code>$ python manage.py monitor script\n</code></pre></p> </li> </ul>"},{"location":"apps/monitoring/scripts/","title":"Monitoring Scripts","text":"<p>A monitoring script is something that you want to execute recurrently withing the breathecode API, for example:</p> <p><code>scripts/alert_pending_leads.py</code> is a small python script that checks if there is FormEntry Marketing module database that are pending processing.</p> <p>You can create a monitoring script to remind academy staff members about things, or to remind students about pending homework, etc.</p>"},{"location":"apps/monitoring/scripts/#stepts-to-create-a-new-script","title":"Stepts to create a new script:","text":"<ol> <li>create a new python file inside <code>./breathecode/monitoring/scripts</code></li> <li>make sure your script starts with this content always:</li> </ol> <pre><code>#!/usr/bin/env python\n\"\"\"\nAlert when there are Form Entries with status = PENDING\n\"\"\"\nfrom breathecode.utils import ScriptNotification\n# start your code here\n</code></pre> <ol> <li>You have access to the entire breathecode API from here, you can import models, services or any other class or variable from any file.</li> <li>You can raise a <code>ScriptNotification</code> to notify for <code>MINOR</code> or <code>CRITICAL</code> reasons, for example:</li> </ol> <p><pre><code># here we are raising a notification because there are 2 pending tasks\nraise ScriptNotification(\"There are 2 pending taks\", status='MINOR', slug=\"pending_tasks\")\n</code></pre> 5. If you don't raise any ScriptNotification and there are no other Exceptions in the script, it will be considered successfull and no notifications will trigger. 6. When a ScriptNotification has been raise the Application owner will receive a notification to the application.email and slack channel configured for notifications. 7. Check for other scripts as examples. 8. Test your script.</p>"},{"location":"apps/monitoring/scripts/#global-context","title":"Global Context","text":"<p>There are some global variables that you have available during your scripts:</p> Variable name Value academy Contains the academy model object, you can use it to retrieve the current academy id like this: <code>query.filter(academy__id=academy.id)</code>"},{"location":"apps/monitoring/scripts/#manually-running-your-script","title":"Manually running your script","text":"<p>You can test your scripts by running the following command:</p> <pre><code>$ python manage.py run_script &lt;file_name&gt;\n\n# For example you can test the alert_pending_leads script like this:\n$ python manage.py run_script alert_pending_leads.py\n</code></pre>"},{"location":"apps/monitoring/scripts/#example-script","title":"Example Script","text":"<p>The following script checks for pending leads to process:</p> <pre><code>#!/usr/bin/env python\n\"\"\"\nAlert when there are Form Entries with status = PENDING\n\"\"\"\nfrom breathecode.marketing.models import FormEntry\nfrom django.db.models import Q\nfrom breathecode.utils import ScriptNotification\n# check the database for pending leads\npending_leads = FormEntry.objects.filter(storage_status=\"PENDING\").filter(Q(academy__id=academy.id) | Q(location=academy.slug))\n# trigger notification because pending leads were found\nif len(pending_leads) &gt; 0:\nraise ScriptNotification(f\"Warning there are {len(pending_leads)} pending form entries\", status='MINOR')\n# You can print this and it will show on the script results\nprint(\"No pending leads\")\n</code></pre>"},{"location":"apps/monitoring/scripts/#unit-testing-your-script","title":"Unit testing your script","text":"<p>from breathecode.monitoring.actions import run_script</p> <pre><code>script = run_script(model.monitor_script)\ndel script['slack_payload']\ndel script['title']\nexpected = {'details': script['details'],\n'severity_level': 5,\n'status': script['status'],\n'text': script['text']\n}\nself.assertEqual(script, expected)\nself.assertEqual(self.all_monitor_script_dict(), [{\n**self.model_to_dict(model, 'monitor_script'),\n}])\n</code></pre>"},{"location":"deployment/configuring-the-github-secrets/","title":"Configuring the Github secrets","text":"<ol> <li>Get Dockerhub token    </li> <li>Add the repo to Coveralls https://coveralls.io/repos/new</li> <li>Add the repo to Codecov https://app.codecov.io/gh/+</li> <li>Set up the secrets    </li> </ol>"},{"location":"deployment/environment-variables/","title":"Environment variables","text":"name description ENV Represents the current environment, can be <code>DEVELOPMENT</code>, <code>TEST</code>, and <code>PRODUCTION</code> LOG_LEVEL Represents the log level for the logging module, can be <code>NOTSET</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code> and <code>CRITICAL</code> DATABASE_URL Represents the connection string to the database, you can read more about schema url CACHE_MIDDLEWARE_MINUTES Represents how long an item will last in the cache API_URL Represents the url of api rest ADMIN_URL Represents the url of frontend of the admin APP_URL Represents the url of frontend of the webside REDIS_URL Represents the url of Redis CELERY_TASK_SERIALIZER Represents the default serialization method to use. Can be pickle <code>json</code>, <code>yaml</code>, <code>msgpack</code> or any custom serialization methods EMAIL_NOTIFICATIONS_ENABLED Represents if the server can send notifications through email SYSTEM_EMAIL Represents the email of <code>Breathecode</code> for support GITHUB_CLIENT_ID Represents the client id used for the OAuth2 with <code>Github</code> GITHUB_SECRET Represents the secret used for the OAuth2 with <code>Github</code> GITHUB_REDIRECT_URL Represents the redirect url used for the OAuth2 with <code>Github</code> SLACK_CLIENT_ID Represents the client id used for the OAuth2 with <code>Slack</code> SLACK_SECRET Represents the secret used for the OAuth2 with <code>Slack</code> SLACK_REDIRECT_URL Represents the redirect url used for the OAuth2 with <code>Slack</code> MAILGUN_API_KEY Represents the api key used for the OAuth2 with <code>Mailgun</code> MAILGUN_DOMAIN Represents the domain of Breathecode that provided <code>Mailgun</code> EVENTBRITE_KEY Represents the key used for the OAuth2 with <code>Eventbrite</code> FACEBOOK_VERIFY_TOKEN Represents the verify token used for the OAuth2 with <code>Facebook</code> FACEBOOK_CLIENT_ID Represents the client id used for the OAuth2 with <code>Facebook</code> FACEBOOK_SECRET Represents the secret used for the OAuth2 with <code>Facebook</code> FACEBOOK_REDIRECT_URL Represents the redirect url used for the OAuth2 with <code>Facebook</code> ACTIVE_CAMPAIGN_KEY Represents the key used for the OAuth2 with <code>Active Campaign</code> ACTIVE_CAMPAIGN_URL Represents the domain of Breathecode that provided <code>Active Campaign</code> GOOGLE_APPLICATION_CREDENTIALS Represents the file will be saved the service account of <code>Google Cloud</code> GOOGLE_SERVICE_KEY Represents the content of the service account used for the OAuth2 with <code>Google Cloud</code> GOOGLE_PROJECT_ID Project ID on google cloud used for the integration of the entire API GOOGLE_CLOUD_KEY Represents the key used for the OAuth2 with <code>Google Cloud</code> GOOGLE_CLIENT_ID Represents the client id used for the OAuth2 with <code>Google Cloud</code> GOOGLE_SECRET Represents the secret used for the OAuth2 with <code>Google Cloud</code> GOOGLE_REDIRECT_URL Represents the redirect url used for the OAuth2 with <code>Google Cloud</code> DAILY_API_KEY Represents the api key used for the OAuth2 with <code>Daily</code> DAILY_API_URL Represents the domain of Breathecode that provided <code>Daily</code> SAVE_LEADS Represents if Breathecode will persist the leads COMPANY_NAME Represents the company name COMPANY_CONTACT_URL Represents the company contact url COMPANY_LEGAL_NAME Represents the company legal name COMPANY_ADDRESS Represents the company address MEDIA_GALLERY_BUCKET Represents the bucket for the media gallery DOWNLOADS_BUCKET Represents the bucket for the CSV files PROFILE_BUCKET Represents the bucket for profile avatars"},{"location":"installation/environment-variables/","title":"Environment variables","text":"name description ENV Represents the current environment, can be <code>DEVELOPMENT</code>, <code>TEST</code>, and <code>PRODUCTION</code> LOG_LEVEL Represents the log level for the logging module, can be <code>NOTSET</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code> and <code>CRITICAL</code> DATABASE_URL Represents the connection string to the database, you can read more about schema url CACHE_MIDDLEWARE_MINUTES Represents how long an item will last in the cache API_URL Represents the url of api rest ADMIN_URL Represents the url of frontend of the admin APP_URL Represents the url of frontend of the webside REDIS_URL Represents the url of Redis CELERY_TASK_SERIALIZER Represents the default serialization method to use. Can be pickle <code>json</code>, <code>yaml</code>, <code>msgpack</code> or any custom serialization methods EMAIL_NOTIFICATIONS_ENABLED Represents if the server can send notifications through email SYSTEM_EMAIL Represents the email of <code>Breathecode</code> for support SAVE_LEADS Represents if Breathecode will persist the leads COMPANY_NAME Represents the company name COMPANY_CONTACT_URL Represents the company contact url COMPANY_LEGAL_NAME Represents the company legal name COMPANY_ADDRESS Represents the company address MEDIA_GALLERY_BUCKET Represents the bucket for the media gallery DOWNLOADS_BUCKET Represents the bucket for the CSV files PROFILE_BUCKET Represents the bucket for profile avatars"},{"location":"installation/fixtures/","title":"Fixtures","text":"<p>Fixtures are fake data ideal for development.</p>"},{"location":"installation/fixtures/#saving-new-fixtures","title":"Saving new fixtures","text":"<pre><code>python manage.py dumpdata auth &gt; ./breathecode/authenticate/fixtures/users.json\n</code></pre>"},{"location":"installation/fixtures/#loading-all-fixtures","title":"Loading all fixtures","text":"<pre><code>pipenv run python manage.py loaddata breathecode/*/fixtures/dev_*.json\n</code></pre>"},{"location":"security/capabilities/","title":"Capabilities","text":"<p>Authenticated users must belong to at least one academy with a specific role, each role has a series of capabilities that specify what any user with that role will be \"capable\" of doing.</p> <p>Authenticated methods must be decorated with the <code>@capable_of</code> decorator in increase security validation. For example:</p> <pre><code>    from breathecode.utils import capable_of\n@capable_of('crud_member')\ndef post(self, request, academy_id=None):\nserializer = StaffPOSTSerializer(data=request.data)\nif serializer.is_valid():\nserializer.save()\nreturn Response(serializer.data, status=status.HTTP_201_CREATED)\nreturn Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n</code></pre> <p>Any view decorated with the @capable_of must be used passing an academy id either:</p> <ol> <li>Anywhere on the endpoint url, E.g: <code>path('academy/&lt;int:academy_id&gt;/member', MemberView.as_view()),</code></li> <li>Or on the request header using the <code>Academy</code> header.</li> </ol>"},{"location":"security/capabilities/#available-capabilities","title":"Available capabilities:","text":"<p>This list is alive, it will grow and vary over time:</p> <pre><code>CAPABILITIES = [\n{\n'slug': 'read_my_academy',\n'description': 'Read your academy information'\n},\n{\n'slug': 'crud_my_academy',\n'description': 'Read, or update your academy information (very high level, almost the academy admin)'\n},\n{\n'slug': 'crud_member',\n'description': 'Create, update or delete academy members (very high level, almost the academy admin)'\n},\n{\n'slug': 'read_member',\n'description': 'Read academy staff member information'\n},\n{\n'slug': 'crud_student',\n'description': 'Create, update or delete students'\n},\n{\n'slug': 'read_student',\n'description': 'Read student information'\n},\n{\n'slug': 'read_invite',\n'description': 'Read invites from users'\n},\n{\n'slug': 'crud_invite',\n'description': 'Create, update or delete invites from users'\n},\n{\n'slug': 'invite_resend',\n'description': 'Resent invites for user academies'\n},\n{\n'slug': 'read_assignment',\n'description': 'Read assignment information'\n},\n{\n'slug':\n'read_assignment_sensitive_details',\n'description':\n'The mentor in residence is allowed to see aditional info about the task, like the \"delivery url\"'\n},\n{\n'slug': 'read_shortlink',\n'description': 'Access the list of marketing shortlinks'\n},\n{\n'slug': 'crud_shortlink',\n'description': 'Create, update and delete marketing short links'\n},\n{\n'slug': 'crud_assignment',\n'description': 'Update assignments'\n},\n{\n'slug': 'task_delivery_details',\n'description': 'Get delivery URL for a task, that url can be sent to students for delivery'\n},\n{\n'slug': 'read_certificate',\n'description': 'List and read all academy certificates'\n},\n{\n'slug': 'crud_certificate',\n'description': 'Create, update or delete student certificates'\n},\n{\n'slug': 'read_layout',\n'description': 'Read layouts to generate new certificates'\n},\n{\n'slug': 'read_syllabus',\n'description': 'List and read syllabus information'\n},\n{\n'slug': 'crud_syllabus',\n'description': 'Create, update or delete syllabus versions'\n},\n{\n'slug': 'read_organization',\n'description': 'Read academy organization details'\n},\n{\n'slug': 'crud_organization',\n'description': 'Update, create or delete academy organization details'\n},\n{\n'slug': 'read_event',\n'description': 'List and retrieve event information'\n},\n{\n'slug': 'crud_event',\n'description': 'Create, update or delete event information'\n},\n{\n'slug': 'read_all_cohort',\n'description': 'List all the cohorts or single cohort information'\n},\n{\n'slug': 'read_single_cohort',\n'description': 'single cohort information related to a user'\n},\n{\n'slug': 'crud_cohort',\n'description': 'Create, update or delete cohort info'\n},\n{\n'slug': 'read_eventcheckin',\n'description': 'List and read all the event_checkins'\n},\n{\n'slug': 'read_survey',\n'description': 'List all the nps answers'\n},\n{\n'slug': 'crud_survey',\n'description': 'Create, update or delete surveys'\n},\n{\n'slug': 'read_nps_answers',\n'description': 'List all the nps answers'\n},\n{\n'slug': 'read_lead',\n'description': 'List all the leads'\n},\n{\n'slug': 'read_won_lead',\n'description': 'List all the won leads'\n},\n{\n'slug': 'crud_lead',\n'description': 'Create, update or delete academy leads'\n},\n{\n'slug': 'read_review',\n'description': 'Read review for a particular academy'\n},\n{\n'slug': 'crud_review',\n'description': 'Create, update or delete academy reviews'\n},\n{\n'slug': 'read_media',\n'description': 'List all the medias'\n},\n{\n'slug': 'crud_media',\n'description': 'Create, update or delete academy medias'\n},\n{\n'slug': 'read_media_resolution',\n'description': 'List all the medias resolutions'\n},\n{\n'slug': 'crud_media_resolution',\n'description': 'Create, update or delete academy media resolutions'\n},\n{\n'slug': 'read_cohort_activity',\n'description': 'Read low level activity in a cohort (attendancy, etc.)'\n},\n{\n'slug': 'generate_academy_token',\n'description': 'Create a new token only to be used by the academy'\n},\n{\n'slug': 'get_academy_token',\n'description': 'Read the academy token'\n},\n{\n'slug': 'send_reset_password',\n'description': 'Generate a temporal token and resend forgot password link'\n},\n{\n'slug': 'read_activity',\n'description': 'List all the user activities'\n},\n{\n'slug': 'crud_activity',\n'description': 'Create, update or delete a user activities'\n},\n{\n'slug': 'read_assignment',\n'description': 'List all the assignments'\n},\n{\n'slug': 'crud_assignment',\n'description': 'Create, update or delete a assignment'\n},\n{\n'slug':\n'classroom_activity',\n'description':\n'To report student activities during the classroom or cohorts (Specially meant for teachers)'\n},\n{\n'slug': 'academy_reporting',\n'description': 'Get detailed reports about the academy activity'\n},\n{\n'slug': 'generate_temporal_token',\n'description': 'Generate a temporal token to reset github credential or forgot password'\n},\n{\n'slug': 'read_mentorship_service',\n'description': 'Get all mentorship services from one academy'\n},\n{\n'slug': 'crud_mentorship_service',\n'description': 'Create, delete or update all mentorship services from one academy'\n},\n{\n'slug': 'read_mentorship_mentor',\n'description': 'Get all mentorship mentors from one academy'\n},\n{\n'slug': 'crud_mentorship_mentor',\n'description': 'Create, delete or update all mentorship mentors from one academy'\n},\n{\n'slug': 'read_mentorship_session',\n'description': 'Get all session from one academy'\n},\n{\n'slug': 'crud_mentorship_session',\n'description': 'Create, delete or update all session from one academy'\n},\n{\n'slug': 'crud_freelancer_bill',\n'description': 'Create, delete or update all freelancer bills from one academy'\n},\n{\n'slug': 'read_freelancer_bill',\n'description': 'Read all all freelancer bills from one academy'\n},\n{\n'slug': 'crud_mentorship_bill',\n'description': 'Create, delete or update all mentroship bills from one academy'\n},\n{\n'slug': 'read_mentorship_bill',\n'description': 'Read all mentroship bills from one academy'\n},\n{\n'slug': 'read_asset',\n'description': 'Read all academy registry assets'\n},\n{\n'slug': 'crud_asset',\n'description': 'Update, create and delete registry assets'\n},\n{\n'slug': 'read_tag',\n'description': 'Read marketing tags and their details'\n},\n{\n'slug': 'crud_tag',\n'description': 'Update, create and delete a marketing tag and its details'\n},\n{\n'slug': 'get_gitpod_user',\n'description': 'List gitpod user the academy is consuming'\n},\n{\n'slug': 'update_gitpod_user',\n'description': 'Update gitpod user expiration based on available information'\n},\n{\n'slug': 'read_technology',\n'description': 'Read asset technologies'\n},\n{\n'slug': 'crud_technology',\n'description': 'Update, create and delete asset technologies'\n},\n{\n'slug': 'read_keyword',\n'description': 'Read SEO keywords'\n},\n{\n'slug': 'crud_keyword',\n'description': 'Update, create and delete SEO keywords'\n},\n{\n'slug': 'read_keywordcluster',\n'description': 'Update, create and delete asset technologies'\n},\n{\n'slug': 'crud_keywordcluster',\n'description': 'Update, create and delete asset technologies'\n},\n]\n</code></pre>"},{"location":"services/google_cloud/google-cloud-functions/","title":"Google Cloud Functions","text":""},{"location":"services/google_cloud/google-cloud-functions/#write-a-http-function","title":"Write a HTTP function","text":"<p>https://cloud.google.com/functions/docs/writing/http</p>"},{"location":"services/google_cloud/google-cloud-functions/#see-active-functions","title":"See active functions","text":"<p>https://console.cloud.google.com/functions/list</p>"},{"location":"services/google_cloud/google-cloud-functions/#testing-function","title":"Testing function","text":"<p>https://cloud.google.com/functions/docs/testing/test-http#functions-testing-http-integration-python</p>"},{"location":"services/google_cloud/google-cloud-functions/#list-functions","title":"List functions","text":"Name Activator Resource Repository process-zap HTTP process-zap screenshots HTTP screenshots jefer94/screenshots resize-image HTTP resize-image breatheco-de/gcloud-resize-image thumbnail-generator Bucket media-breathecode breatheco-de/gcloud-thumbnail-generator thumbnail-generator-dev Bucket media-breathecode-dev breatheco-de/gcloud-thumbnail-generator"},{"location":"services/google_cloud/storage/","title":"Storage","text":""},{"location":"services/google_cloud/storage/#breathecode.services.google_cloud.storage.Storage","title":"<code>Storage</code>","text":"<p>Google Cloud Storage</p> Source code in <code>breathecode/services/google_cloud/storage.py</code> <pre><code>class Storage:\n\"\"\"Google Cloud Storage\"\"\"\nclient: storage.Client\ndef __init__(self) -&gt; None:\n# from google.cloud.storage import Client\ncredentials.resolve_credentials()\nself.client = storage.Client()\ndef file(self, bucket_name: str, file_name: str) -&gt; File:\n\"\"\"Get File object\n        Args:\n            bucket_name (str): Name of bucket in Google Cloud Storage\n            file_name (str): Name of blob in Google Cloud Bucket\n        Returns:\n            File: File object\n        \"\"\"\nbucket = self.client.bucket(bucket_name)\nreturn File(bucket, file_name)\n</code></pre>"},{"location":"services/google_cloud/storage/#breathecode.services.google_cloud.storage.Storage.file","title":"<code>file(bucket_name, file_name)</code>","text":"<p>Get File object</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>Name of bucket in Google Cloud Storage</p> required <code>file_name</code> <code>str</code> <p>Name of blob in Google Cloud Bucket</p> required <p>Returns:</p> Name Type Description <code>File</code> <code>File</code> <p>File object</p> Source code in <code>breathecode/services/google_cloud/storage.py</code> <pre><code>def file(self, bucket_name: str, file_name: str) -&gt; File:\n\"\"\"Get File object\n    Args:\n        bucket_name (str): Name of bucket in Google Cloud Storage\n        file_name (str): Name of blob in Google Cloud Bucket\n    Returns:\n        File: File object\n    \"\"\"\nbucket = self.client.bucket(bucket_name)\nreturn File(bucket, file_name)\n</code></pre>"},{"location":"services/slack%20integration/icons/","title":"Icons","text":"<p>The following icons are being used for the slack integrations https://www.pngrepo.com/collection/soft-colored-ui-icons/1</p>"},{"location":"signals/quickstart/","title":"Quickstart","text":""},{"location":"signals/quickstart/#signals","title":"Signals","text":"<p>The official documentation for django signals can be found here.</p> <p>At BreatheCode, signals are similar concept to \"events\", we use signals as custom \"events\" that can notify important things that happen in one app to all the other app's (if they are listening).</p> <p>For example: When a student drops from a cohort</p> <p>There is a signal to notify when a <code>student educational status gets updated</code>, this is useful because other application may react to it. Here is the signal being initialized, here is being triggered/dispatched when a student gets saved and this is an example where the signal is being received on the breathecode.marketing.app to trigger some additional tasks within the system.</p>"},{"location":"signals/quickstart/#when-to-use-a-signal","title":"When to use a signal","text":"<p>Inside the breathecode team, we see signals for asynchronous processing of any side effects, we try to focus on them for communication between apps only.</p>"},{"location":"signals/quickstart/#declare-a-new-signal","title":"Declare a new signal","text":"<p>You have many examples that you can find inside the code, each breathecode app has a file <code>signals.py</code> that contains all the signals dispatched by that app. If the file does not exist within one of the apps, and you need to create a signal for that app, you can create the file yourself.</p> <p>If you wanted to create a signal for when a cohort is saved, you should start by initializing it inside <code>breathecode/admissions/signals.py</code> like this:</p> <pre><code>from django.dispatch import Signal\ncohort_saved = Signal()\n</code></pre>"},{"location":"signals/quickstart/#dispatching-a-signal","title":"Dispatching a signal","text":"<p>All the initialized signals are available on the same application <code>signals.py</code> file, if the signal you want to dispatch is not there, you should probably declare a new one.</p> <p>After the signal is initialized, it can be dispatched anywhere withing the same app, for example inside a serializer create method like this:</p> <pre><code>from .signals import cohort_saved\nclass CohortSerializer(CohortSerializerMixin):\ndef create(self, validated_data):\ncohort = Cohort.objects.create(**validated_data, **self.context)\ncohort_saved.send(instance=self, sender=CohortUser)\nreturn cohort\n</code></pre>"},{"location":"signals/quickstart/#receiving-a-signal","title":"Receiving a signal","text":"<p>All django applications can subscribe to receive a signal, even if those signals are coming from another app, but you should always add your receiving code inside the receivers.py of the app that will react to the signal.</p> <p>The following code will receive the <code>cohort_saved</code> signal and print on the screen if its being created or updated.</p> <p>Note: Its a good idea to always connect receivers to tasks, that way you can asynconosly pospone any processing that you will do after the cohort its created.</p> <pre><code>from breathecode.admissions.signals import student_edu_status_updated, cohort_saved\nfrom .models import FormEntry, ActiveCampaignAcademy\nfrom .tasks import add_cohort_task_to_student, add_cohort_slug_as_acp_tag\n@receiver(cohort_saved, sender=Cohort)\ndef cohort_post_save(sender, instance, created, *args, **kwargs):\nif created:\nprint(f\"The cohort {instance.id} was just created\")\n# you can call a task from task.py here.\nelse:\nprint(f\"The cohort {instance.id} was just updated\")\n</code></pre>"},{"location":"testing/runing-tests/","title":"Runing tests","text":""},{"location":"testing/runing-tests/#run-tests","title":"Run tests","text":"<pre><code>pipenv run test ./breathecode/\n</code></pre>"},{"location":"testing/runing-tests/#run-tests-in-parallel","title":"Run tests in parallel","text":"<pre><code>pipenv run ptest ./breathecode/\n</code></pre>"},{"location":"testing/runing-tests/#run-coverage","title":"Run coverage","text":"<pre><code>pipenv run cov breathecode\n</code></pre>"},{"location":"testing/runing-tests/#run-coverage-in-parallel","title":"Run coverage in parallel","text":"<pre><code>pipenv run pcov breathecode\n</code></pre>"},{"location":"testing/runing-tests/#testing-inside-docker-fallback-option","title":"Testing inside Docker (fallback option)","text":"<ol> <li>Check which dependencies you need install in you operating system <code>pipenv run doctor</code> or <code>python -m scripts.doctor</code>.</li> <li>Install docker desktop in your Windows, else find a guide to install Docker and Docker Compose in your linux distribution <code>uname -a</code>.</li> <li>Generate the BreatheCode Shell image with <code>pipenv run docker_build_shell</code>.</li> <li>Run BreatheCode Shell with <code>docker-compose run bc-shell</code></li> <li>Run <code>pipenv run test</code>, <code>pipenv run ptest</code>, <code>pipenv run cov</code> or <code>pipenv run pcov</code>.</li> </ol>"},{"location":"testing/mixins/bc-cache/","title":"bc.cache","text":""},{"location":"testing/mixins/bc-cache/#breathecode.tests.mixins.breathecode_mixin.cache.Cache","title":"<code>Cache</code>","text":"<p>Mixin with the purpose of cover all the related with cache</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/cache.py</code> <pre><code>class Cache:\n\"\"\"Mixin with the purpose of cover all the related with cache\"\"\"\nclear = CacheMixin.clear_cache\n_parent: APITestCase\n_bc: interfaces.BreathecodeInterface\ndef __init__(self, parent, bc: interfaces.BreathecodeInterface) -&gt; None:\nself._parent = parent\nself._bc = bc\n</code></pre>"},{"location":"testing/mixins/bc-check/","title":"bc.check","text":""},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check","title":"<code>Check</code>","text":"<p>Mixin with the purpose of cover all the related with the custom asserts</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/check.py</code> <pre><code>class Check:\n\"\"\"Mixin with the purpose of cover all the related with the custom asserts\"\"\"\nsha256 = Sha256Mixin.assertHash\ntoken = TokenMixin.assertToken\n_parent: APITestCase\n_bc: interfaces.BreathecodeInterface\ndef __init__(self, parent, bc: interfaces.BreathecodeInterface) -&gt; None:\nself._parent = parent\nself._bc = bc\ndef datetime_in_range(self, start: datetime, end: datetime, date: datetime) -&gt; None:\n\"\"\"\n        Check if a range if between start and end argument.\n        Usage:\n        ```py\n        from django.utils import timezone\n        start = timezone.now()\n        in_range = timezone.now()\n        end = timezone.now()\n        out_of_range = timezone.now()\n        # pass because this datetime is between start and end\n        self.bc.check.datetime_in_range(start, end, in_range)  # \ud83d\udfe2\n        # fail because this datetime is not between start and end\n        self.bc.check.datetime_in_range(start, end, out_of_range)  # \ud83d\udd34\n        ```\n        \"\"\"\nself._parent.assertLess(start, date)\nself._parent.assertGreater(end, date)\ndef partial_equality(self, first: dict | list[dict], second: dict | list[dict]) -&gt; None:\n\"\"\"\n        Fail if the two objects are partially unequal as determined by the '==' operator.\n        Usage:\n        ```py\n        obj1 = {'key1': 1, 'key2': 2}\n        obj2 = {'key2': 2, 'key3': 1}\n        obj3 = {'key2': 2}\n        # it's fail because the key3 is not in the obj1\n        self.bc.check.partial_equality(obj1, obj2)  # \ud83d\udd34\n        # it's fail because the key1 is not in the obj2\n        self.bc.check.partial_equality(obj2, obj1)  # \ud83d\udd34\n        # it's pass because the key2 exists in the obj1\n        self.bc.check.partial_equality(obj1, obj3)  # \ud83d\udfe2\n        # it's pass because the key2 exists in the obj2\n        self.bc.check.partial_equality(obj2, obj3)  # \ud83d\udfe2\n        # it's fail because the key1 is not in the obj3\n        self.bc.check.partial_equality(obj3, obj1)  # \ud83d\udd34\n        # it's fail because the key3 is not in the obj3\n        self.bc.check.partial_equality(obj3, obj2)  # \ud83d\udd34\n        ```\n        \"\"\"\nassert type(first) == type(second)\nif isinstance(first, list):\nassert len(first) == len(second)\noriginal = []\nfor i in range(0, len(first)):\noriginal.append(self._fill_partial_equality(first[i], second[i]))\nelse:\noriginal = self._fill_partial_equality(first, second)\nself._parent.assertEqual(original, second)\ndef calls(self, first: list[call], second: list[call]) -&gt; None:\n\"\"\"\n        Fail if the two objects are partially unequal as determined by the '==' operator.\n        Usage:\n        ```py\n        self.bc.check.calls(mock.call_args_list, [call(1, 2, a=3, b=4)])\n        ```\n        \"\"\"\nassert len(first) == len(second), f'{first} not have same length than {second}'\nfor i in range(0, len(first)):\nself._parent.assertEqual(first[i].args, second[i].args, msg=f'args in index {i} does not match')\nself._parent.assertEqual(first[i].kwargs,\nsecond[i].kwargs,\nmsg=f'kwargs in index {i} does not match')\ndef _fill_partial_equality(self, first: dict, second: dict) -&gt; dict:\noriginal = {}\nfor key in second.keys():\noriginal[key] = second[key]\nreturn original\ndef queryset_of(self, query: Any, model: Model) -&gt; None:\n\"\"\"\n        Check if the first argument is a queryset of a models provided as second argument.\n        Usage:\n        ```py\n        from breathecode.admissions.models import Cohort, Academy\n        self.bc.database.create(cohort=1)\n        collection = []\n        queryset = Cohort.objects.filter()\n        # pass because the first argument is a QuerySet and it's type Cohort\n        self.bc.check.queryset_of(queryset, Cohort)  # \ud83d\udfe2\n        # fail because the first argument is a QuerySet and it is not type Academy\n        self.bc.check.queryset_of(queryset, Academy)  # \ud83d\udd34\n        # fail because the first argument is not a QuerySet\n        self.bc.check.queryset_of(collection, Academy)  # \ud83d\udd34\n        ```\n        \"\"\"\nif not isinstance(query, QuerySet):\nself._parent.fail('The first argument is not a QuerySet')\nif query.model != model:\nself._parent.fail(f'The QuerySet is type {query.model.__name__} instead of {model.__name__}')\ndef queryset_with_pks(self, query: Any, pks: list[int]) -&gt; None:\n\"\"\"\n        Check if the queryset have the following primary keys.\n        Usage:\n        ```py\n        from breathecode.admissions.models import Cohort, Academy\n        self.bc.database.create(cohort=1)\n        collection = []\n        queryset = Cohort.objects.filter()\n        # pass because the QuerySet has the primary keys 1\n        self.bc.check.queryset_with_pks(queryset, [1])  # \ud83d\udfe2\n        # fail because the QuerySet has the primary keys 1 but the second argument is empty\n        self.bc.check.queryset_with_pks(queryset, [])  # \ud83d\udd34\n        ```\n        \"\"\"\nif not isinstance(query, QuerySet):\nself._parent.fail('The first argument is not a QuerySet')\nself._parent.assertEqual([x.pk for x in query], pks)\ndef list_with_pks(self, query: Any, pks: list[int]) -&gt; None:\n\"\"\"\n        Check if the list have the following primary keys.\n        Usage:\n        ```py\n        from breathecode.admissions.models import Cohort, Academy\n        model = self.bc.database.create(cohort=1)\n        collection = [model.cohort]\n        # pass because the QuerySet has the primary keys 1\n        self.bc.check.list_with_pks(collection, [1])  # \ud83d\udfe2\n        # fail because the QuerySet has the primary keys 1 but the second argument is empty\n        self.bc.check.list_with_pks(collection, [])  # \ud83d\udd34\n        ```\n        \"\"\"\nif not isinstance(query, list):\nself._parent.fail('The first argument is not a list')\nself._parent.assertEqual([x.pk for x in query], pks)\n</code></pre>"},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check.calls","title":"<code>calls(first, second)</code>","text":"<p>Fail if the two objects are partially unequal as determined by the '==' operator.</p> <p>Usage:</p> <pre><code>self.bc.check.calls(mock.call_args_list, [call(1, 2, a=3, b=4)])\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/check.py</code> <pre><code>def calls(self, first: list[call], second: list[call]) -&gt; None:\n\"\"\"\n    Fail if the two objects are partially unequal as determined by the '==' operator.\n    Usage:\n    ```py\n    self.bc.check.calls(mock.call_args_list, [call(1, 2, a=3, b=4)])\n    ```\n    \"\"\"\nassert len(first) == len(second), f'{first} not have same length than {second}'\nfor i in range(0, len(first)):\nself._parent.assertEqual(first[i].args, second[i].args, msg=f'args in index {i} does not match')\nself._parent.assertEqual(first[i].kwargs,\nsecond[i].kwargs,\nmsg=f'kwargs in index {i} does not match')\n</code></pre>"},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check.datetime_in_range","title":"<code>datetime_in_range(start, end, date)</code>","text":"<p>Check if a range if between start and end argument.</p> <p>Usage:</p> <pre><code>from django.utils import timezone\nstart = timezone.now()\nin_range = timezone.now()\nend = timezone.now()\nout_of_range = timezone.now()\n# pass because this datetime is between start and end\nself.bc.check.datetime_in_range(start, end, in_range)  # \ud83d\udfe2\n# fail because this datetime is not between start and end\nself.bc.check.datetime_in_range(start, end, out_of_range)  # \ud83d\udd34\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/check.py</code> <pre><code>def datetime_in_range(self, start: datetime, end: datetime, date: datetime) -&gt; None:\n\"\"\"\n    Check if a range if between start and end argument.\n    Usage:\n    ```py\n    from django.utils import timezone\n    start = timezone.now()\n    in_range = timezone.now()\n    end = timezone.now()\n    out_of_range = timezone.now()\n    # pass because this datetime is between start and end\n    self.bc.check.datetime_in_range(start, end, in_range)  # \ud83d\udfe2\n    # fail because this datetime is not between start and end\n    self.bc.check.datetime_in_range(start, end, out_of_range)  # \ud83d\udd34\n    ```\n    \"\"\"\nself._parent.assertLess(start, date)\nself._parent.assertGreater(end, date)\n</code></pre>"},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check.list_with_pks","title":"<code>list_with_pks(query, pks)</code>","text":"<p>Check if the list have the following primary keys.</p> <p>Usage:</p> <pre><code>from breathecode.admissions.models import Cohort, Academy\nmodel = self.bc.database.create(cohort=1)\ncollection = [model.cohort]\n# pass because the QuerySet has the primary keys 1\nself.bc.check.list_with_pks(collection, [1])  # \ud83d\udfe2\n# fail because the QuerySet has the primary keys 1 but the second argument is empty\nself.bc.check.list_with_pks(collection, [])  # \ud83d\udd34\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/check.py</code> <pre><code>def list_with_pks(self, query: Any, pks: list[int]) -&gt; None:\n\"\"\"\n    Check if the list have the following primary keys.\n    Usage:\n    ```py\n    from breathecode.admissions.models import Cohort, Academy\n    model = self.bc.database.create(cohort=1)\n    collection = [model.cohort]\n    # pass because the QuerySet has the primary keys 1\n    self.bc.check.list_with_pks(collection, [1])  # \ud83d\udfe2\n    # fail because the QuerySet has the primary keys 1 but the second argument is empty\n    self.bc.check.list_with_pks(collection, [])  # \ud83d\udd34\n    ```\n    \"\"\"\nif not isinstance(query, list):\nself._parent.fail('The first argument is not a list')\nself._parent.assertEqual([x.pk for x in query], pks)\n</code></pre>"},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check.partial_equality","title":"<code>partial_equality(first, second)</code>","text":"<p>Fail if the two objects are partially unequal as determined by the '==' operator.</p> <p>Usage:</p> <pre><code>obj1 = {'key1': 1, 'key2': 2}\nobj2 = {'key2': 2, 'key3': 1}\nobj3 = {'key2': 2}\n# it's fail because the key3 is not in the obj1\nself.bc.check.partial_equality(obj1, obj2)  # \ud83d\udd34\n# it's fail because the key1 is not in the obj2\nself.bc.check.partial_equality(obj2, obj1)  # \ud83d\udd34\n# it's pass because the key2 exists in the obj1\nself.bc.check.partial_equality(obj1, obj3)  # \ud83d\udfe2\n# it's pass because the key2 exists in the obj2\nself.bc.check.partial_equality(obj2, obj3)  # \ud83d\udfe2\n# it's fail because the key1 is not in the obj3\nself.bc.check.partial_equality(obj3, obj1)  # \ud83d\udd34\n# it's fail because the key3 is not in the obj3\nself.bc.check.partial_equality(obj3, obj2)  # \ud83d\udd34\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/check.py</code> <pre><code>def partial_equality(self, first: dict | list[dict], second: dict | list[dict]) -&gt; None:\n\"\"\"\n    Fail if the two objects are partially unequal as determined by the '==' operator.\n    Usage:\n    ```py\n    obj1 = {'key1': 1, 'key2': 2}\n    obj2 = {'key2': 2, 'key3': 1}\n    obj3 = {'key2': 2}\n    # it's fail because the key3 is not in the obj1\n    self.bc.check.partial_equality(obj1, obj2)  # \ud83d\udd34\n    # it's fail because the key1 is not in the obj2\n    self.bc.check.partial_equality(obj2, obj1)  # \ud83d\udd34\n    # it's pass because the key2 exists in the obj1\n    self.bc.check.partial_equality(obj1, obj3)  # \ud83d\udfe2\n    # it's pass because the key2 exists in the obj2\n    self.bc.check.partial_equality(obj2, obj3)  # \ud83d\udfe2\n    # it's fail because the key1 is not in the obj3\n    self.bc.check.partial_equality(obj3, obj1)  # \ud83d\udd34\n    # it's fail because the key3 is not in the obj3\n    self.bc.check.partial_equality(obj3, obj2)  # \ud83d\udd34\n    ```\n    \"\"\"\nassert type(first) == type(second)\nif isinstance(first, list):\nassert len(first) == len(second)\noriginal = []\nfor i in range(0, len(first)):\noriginal.append(self._fill_partial_equality(first[i], second[i]))\nelse:\noriginal = self._fill_partial_equality(first, second)\nself._parent.assertEqual(original, second)\n</code></pre>"},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check.queryset_of","title":"<code>queryset_of(query, model)</code>","text":"<p>Check if the first argument is a queryset of a models provided as second argument.</p> <p>Usage:</p> <pre><code>from breathecode.admissions.models import Cohort, Academy\nself.bc.database.create(cohort=1)\ncollection = []\nqueryset = Cohort.objects.filter()\n# pass because the first argument is a QuerySet and it's type Cohort\nself.bc.check.queryset_of(queryset, Cohort)  # \ud83d\udfe2\n# fail because the first argument is a QuerySet and it is not type Academy\nself.bc.check.queryset_of(queryset, Academy)  # \ud83d\udd34\n# fail because the first argument is not a QuerySet\nself.bc.check.queryset_of(collection, Academy)  # \ud83d\udd34\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/check.py</code> <pre><code>def queryset_of(self, query: Any, model: Model) -&gt; None:\n\"\"\"\n    Check if the first argument is a queryset of a models provided as second argument.\n    Usage:\n    ```py\n    from breathecode.admissions.models import Cohort, Academy\n    self.bc.database.create(cohort=1)\n    collection = []\n    queryset = Cohort.objects.filter()\n    # pass because the first argument is a QuerySet and it's type Cohort\n    self.bc.check.queryset_of(queryset, Cohort)  # \ud83d\udfe2\n    # fail because the first argument is a QuerySet and it is not type Academy\n    self.bc.check.queryset_of(queryset, Academy)  # \ud83d\udd34\n    # fail because the first argument is not a QuerySet\n    self.bc.check.queryset_of(collection, Academy)  # \ud83d\udd34\n    ```\n    \"\"\"\nif not isinstance(query, QuerySet):\nself._parent.fail('The first argument is not a QuerySet')\nif query.model != model:\nself._parent.fail(f'The QuerySet is type {query.model.__name__} instead of {model.__name__}')\n</code></pre>"},{"location":"testing/mixins/bc-check/#breathecode.tests.mixins.breathecode_mixin.check.Check.queryset_with_pks","title":"<code>queryset_with_pks(query, pks)</code>","text":"<p>Check if the queryset have the following primary keys.</p> <p>Usage:</p> <pre><code>from breathecode.admissions.models import Cohort, Academy\nself.bc.database.create(cohort=1)\ncollection = []\nqueryset = Cohort.objects.filter()\n# pass because the QuerySet has the primary keys 1\nself.bc.check.queryset_with_pks(queryset, [1])  # \ud83d\udfe2\n# fail because the QuerySet has the primary keys 1 but the second argument is empty\nself.bc.check.queryset_with_pks(queryset, [])  # \ud83d\udd34\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/check.py</code> <pre><code>def queryset_with_pks(self, query: Any, pks: list[int]) -&gt; None:\n\"\"\"\n    Check if the queryset have the following primary keys.\n    Usage:\n    ```py\n    from breathecode.admissions.models import Cohort, Academy\n    self.bc.database.create(cohort=1)\n    collection = []\n    queryset = Cohort.objects.filter()\n    # pass because the QuerySet has the primary keys 1\n    self.bc.check.queryset_with_pks(queryset, [1])  # \ud83d\udfe2\n    # fail because the QuerySet has the primary keys 1 but the second argument is empty\n    self.bc.check.queryset_with_pks(queryset, [])  # \ud83d\udd34\n    ```\n    \"\"\"\nif not isinstance(query, QuerySet):\nself._parent.fail('The first argument is not a QuerySet')\nself._parent.assertEqual([x.pk for x in query], pks)\n</code></pre>"},{"location":"testing/mixins/bc-database/","title":"bc.database","text":""},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database","title":"<code>Database</code>","text":"<p>Mixin with the purpose of cover all the related with the database</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>class Database:\n\"\"\"Mixin with the purpose of cover all the related with the database\"\"\"\n_cache: dict[str, Model] = {}\n_parent: APITestCase\n_bc: interfaces.BreathecodeInterface\nhow_many = 0\ndef __init__(self, parent, bc: interfaces.BreathecodeInterface) -&gt; None:\nself._parent = parent\nself._bc = bc\ndef reset_queries(self):\nreset_queries()\n# @override_settings(DEBUG=True)\ndef get_queries(self, db='default'):\nreturn [query['sql'] for query in connections[db].queries]\n# @override_settings(DEBUG=True)\ndef print_queries(self, db='default'):\nfor query in connections[db].queries:\nprint(f'{query[\"time\"]} {query[\"sql\"]}\\n')\n@classmethod\ndef get_model(cls, path: str) -&gt; Model:\n\"\"\"\n        Return the model matching the given app_label and model_name.\n        As a shortcut, app_label may be in the form &lt;app_label&gt;.&lt;model_name&gt;.\n        model_name is case-insensitive.\n        Raise LookupError if no application exists with this label, or no\n        model exists with this name in the application. Raise ValueError if\n        called with a single argument that doesn't contain exactly one dot.\n        Usage:\n        ```py\n        # class breathecode.admissions.models.Cohort\n        Cohort = self.bc.database.get_model('admissions.Cohort')\n        ```\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        \"\"\"\nif path in cls._cache:\nreturn cls._cache[path]\napp_label, model_name = path.split('.')\ncls._cache[path] = apps.get_model(app_label, model_name)\nreturn cls._cache[path]\ndef list_of(self, path: str, dict: bool = True) -&gt; list[Model | dict[str, Any]]:\n\"\"\"\n        This is a wrapper for `Model.objects.filter()`, get a list of values of models as `list[dict]` if\n        `dict=True` else get a list of `Model` instances.\n        Usage:\n        ```py\n        # get all the Cohort as list of dict\n        self.bc.database.get('admissions.Cohort')\n        # get all the Cohort as list of instances of model\n        self.bc.database.get('admissions.Cohort', dict=False)\n        ```\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        - dict(`bool`): if true return dict of values of model else return model instance.\n        \"\"\"\nmodel = Database.get_model(path)\nresult = model.objects.filter()\nif dict:\nresult = [ModelsMixin.remove_dinamics_fields(self, data.__dict__.copy()) for data in result]\nreturn result\n@database_sync_to_async\ndef async_list_of(self, path: str, dict: bool = True) -&gt; list[Model | dict[str, Any]]:\n\"\"\"\n        This is a wrapper for `Model.objects.filter()`, get a list of values of models as `list[dict]` if\n        `dict=True` else get a list of `Model` instances.\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        - dict(`bool`): if true return dict of values of model else return model instance.\n        \"\"\"\nreturn self.list_of(path, dict)\ndef delete(self, path: str, pk: Optional[int | str] = None) -&gt; tuple[int, dict[str, int]]:\n\"\"\"\n        This is a wrapper for `Model.objects.filter(pk=pk).delete()`, delete a element if `pk` is provided else\n        all the entries.\n        Usage:\n        ```py\n        # create 19110911 cohorts \ud83e\uddbe\n        self.bc.database.create(cohort=19110911)\n        # exists 19110911 cohorts \ud83e\uddbe\n        self.assertEqual(self.bc.database.count('admissions.Cohort'), 19110911)\n        # remove all the cohorts\n        self.bc.database.delete(10)\n        # exists 19110910 cohorts\n        self.assertEqual(self.bc.database.count('admissions.Cohort'), 19110910)\n        ```\n        # remove all the cohorts\n        self.bc.database.delete()\n        # exists 0 cohorts\n        self.assertEqual(self.bc.database.count('admissions.Cohort'), 0)\n        ```\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        - pk(`str | int`): primary key of model.\n        \"\"\"\nlookups = {'pk': pk} if pk else {}\nmodel = Database.get_model(path)\nreturn model.objects.filter(**lookups).delete()\ndef get(self, path: str, pk: int or str, dict: bool = True) -&gt; Model | dict[str, Any]:\n\"\"\"\n        This is a wrapper for `Model.objects.filter(pk=pk).first()`, get the values of model as `dict` if\n        `dict=True` else get the `Model` instance.\n        Usage:\n        ```py\n        # get the Cohort with the pk 1 as dict\n        self.bc.database.get('admissions.Cohort', 1)\n        # get the Cohort with the pk 1 as instance of model\n        self.bc.database.get('admissions.Cohort', 1, dict=False)\n        ```\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        - pk(`str | int`): primary key of model.\n        - dict(`bool`): if true return dict of values of model else return model instance.\n        \"\"\"\nmodel = Database.get_model(path)\nresult = model.objects.filter(pk=pk).first()\nif dict:\nresult = ModelsMixin.remove_dinamics_fields(self, result.__dict__.copy())\nreturn result\n@database_sync_to_async\ndef async_get(self, path: str, pk: int | str, dict: bool = True) -&gt; Model | dict[str, Any]:\n\"\"\"\n        This is a wrapper for `Model.objects.filter(pk=pk).first()`, get the values of model as `dict` if\n        `dict=True` else get the `Model` instance.\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        - pk(`str | int`): primary key of model.\n        - dict(`bool`): if true return dict of values of model else return model instance.\n        \"\"\"\nreturn self.get(path, pk, dict)\ndef count(self, path: str) -&gt; int:\n\"\"\"\n        This is a wrapper for `Model.objects.count()`, get how many instances of this `Model` are saved.\n        Usage:\n        ```py\n        self.bc.database.count('admissions.Cohort')\n        ```\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        \"\"\"\nmodel = Database.get_model(path)\nreturn model.objects.count()\n@database_sync_to_async\ndef async_count(self, path: str) -&gt; int:\n\"\"\"\n        This is a wrapper for `Model.objects.count()`, get how many instances of this `Model` are saved.\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        \"\"\"\nreturn self.count(path)\n@cache\ndef _get_models(self) -&gt; list[Model]:\nvalues = {}\nfor key in apps.app_configs:\nvalues[key] = apps.get_app_config(key).get_models()\nreturn values\ndef camel_case_to_snake_case(self, name):\nname = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', name)\nreturn re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', name).lower()\ndef _get_model_field_info(self, model, key):\nattr = getattr(model, key)\nmeta = vars(attr)['field'].related_model._meta\nmodel = vars(attr)['field'].related_model\nblank = attr.field.blank\nnull = attr.field.null\nresult = {\n'field': key,\n'blank': blank,\n'null': null,\n'app_name': meta.app_label,\n'model_name': meta.object_name,\n'handler': attr,\n'model': model,\n}\nif hasattr(attr, 'through'):\nresult['custom_through'] = '_' not in attr.through.__name__\nresult['through_fields'] = attr.rel.through_fields\nreturn result\n@cache\ndef _get_models_descriptors(self) -&gt; list[Model]:\nvalues = {}\napps = self._get_models()\nfor app_key in apps:\nvalues[app_key] = {}\nmodels = apps[app_key]\nfor model in models:\nvalues[app_key][model.__name__] = {}\nvalues[app_key][model.__name__]['meta'] = {\n'app_name': model._meta.app_label,\n'model_name': model._meta.object_name,\n'model': model,\n}\nvalues[app_key][model.__name__]['to_one'] = [\nself._get_model_field_info(model, x) for x in dir(model)\nif isinstance(getattr(model, x), ForwardManyToOneDescriptor)\n]\nvalues[app_key][model.__name__]['to_many'] = [\nself._get_model_field_info(model, x) for x in dir(model)\nif isinstance(getattr(model, x), ManyToManyDescriptor)\n]\nreturn values\n@cache\ndef _get_models_dependencies(self) -&gt; list[Model]:\nvalues = {}\ndescriptors = self._get_models_descriptors()\nfor app_key in descriptors:\nfor descriptor_key in descriptors[app_key]:\ndescriptor = descriptors[app_key][descriptor_key]\nif app_key not in values:\nvalues[app_key] = set()\nprimary_values = values[app_key]['primary'] if 'primary' in values[app_key] else []\nsecondary_values = values[app_key]['secondary'] if 'secondary' in values[app_key] else []\nvalues[app_key] = {\n'primary': {\n*primary_values, *[\nx['app_name']\nfor x in descriptor['to_one'] if x['app_name'] != app_key and x['null'] == False\n], *[\nx['app_name']\nfor x in descriptor['to_many'] if x['app_name'] != app_key and x['null'] == False\n]\n},\n'secondary': {\n*secondary_values, *[\nx['app_name']\nfor x in descriptor['to_one'] if x['app_name'] != app_key and x['null'] == True\n], *[\nx['app_name']\nfor x in descriptor['to_many'] if x['app_name'] != app_key and x['null'] == True\n]\n},\n}\nreturn values\ndef _sort_models_handlers(self,\ndependencies_resolved=None,\nprimary_values=None,\nsecondary_values=None,\nprimary_dependencies=None,\nsecondary_dependencies=None,\nconsume_primary=True) -&gt; list[Model]:\ndependencies_resolved = dependencies_resolved or set()\nprimary_values = primary_values or []\nsecondary_values = secondary_values or []\nif not primary_dependencies and not secondary_dependencies:\ndependencies = self._get_models_dependencies()\nprimary_dependencies = {}\nfor x in dependencies:\nprimary_dependencies[x] = dependencies[x]['primary']\nsecondary_dependencies = {}\nfor x in dependencies:\nsecondary_dependencies[x] = dependencies[x]['secondary']\nfor dependency in dependencies_resolved:\nfor key in primary_dependencies:\nif dependency in primary_dependencies[key]:\nprimary_dependencies[key].remove(dependency)\nprimary_found = [\nx for x in [y for y in primary_dependencies if y not in dependencies_resolved]\nif len(primary_dependencies[x]) == 0\n]\nfor x in primary_found:\ndependencies_resolved.add(x)\nsecondary_found = [\nx for x in [y for y in secondary_dependencies if y not in dependencies_resolved]\nif len(secondary_dependencies[x]) == 0\n]\nif consume_primary and primary_found:\nprimary_values.append(primary_found)\nelif not consume_primary and secondary_found:\nsecondary_values.append(secondary_found)\nfor x in primary_found:\ndel primary_dependencies[x]\nfor dependency in primary_dependencies:\nif x in primary_dependencies[dependency]:\nprimary_dependencies[dependency].remove(x)\nif primary_dependencies:\nreturn self._sort_models_handlers(dependencies_resolved,\nprimary_values,\nsecondary_values,\nprimary_dependencies,\nsecondary_dependencies,\nconsume_primary=True)\nif secondary_dependencies:\nreturn primary_values, [x for x in secondary_dependencies if len(secondary_dependencies[x])]\nreturn primary_values, secondary_values\n@cache\ndef _get_models_handlers(self) -&gt; list[Model]:\narguments = {}\narguments_banned = set()\norder, deferred = self._sort_models_handlers()\ndescriptors = self._get_models_descriptors()\ndef manage_model(models, descriptor, *args, **kwargs):\nmodel_field_name = self.camel_case_to_snake_case(descriptor['meta']['model_name'])\napp_name = descriptor['meta']['app_name']\nmodel_name = descriptor['meta']['model_name']\nif model_field_name in kwargs and f'{app_name}__{model_field_name}' in kwargs:\nraise Exception(f'Exists many apps with the same model name `{model_name}`, please use '\nf'`{app_name}__{model_field_name}` instead of `{model_field_name}`')\narg = False\nif f'{app_name}__{model_field_name}' in kwargs:\narg = kwargs[f'{app_name}__{model_field_name}']\nelif model_field_name in kwargs:\narg = kwargs[model_field_name]\nif not model_field_name in models and is_valid(arg):\nkargs = {}\nfor x in descriptor['to_one']:\nrelated_model_field_name = self.camel_case_to_snake_case(x['model_name'])\nif related_model_field_name in models:\nkargs[x['field']] = just_one(models[related_model_field_name])\nwithout_through = [x for x in descriptor['to_many'] if x['custom_through'] == False]\nfor x in without_through:\nrelated_model_field_name = self.camel_case_to_snake_case(x['model_name'])\nif related_model_field_name in models:\nkargs[x['field']] = get_list(models[related_model_field_name])\nmodels[model_field_name] = create_models(arg, f'{app_name}.{model_name}', **kargs)\nwith_through = [\nx for x in descriptor['to_many']\nif x['custom_through'] == True and not x['field'].endswith('_set')\n]\nfor x in with_through:\nrelated_model_field_name = self.camel_case_to_snake_case(x['model_name'])\nif related_model_field_name in models:\nfor item in get_list(models[related_model_field_name]):\nthrough_current = x['through_fields'][0]\nthrough_related = x['through_fields'][1]\nthrough_args = {through_current: models[model_field_name], through_related: item}\nx['handler'].through.objects.create(**through_args)\nreturn models\ndef link_deferred_model(models, descriptor, *args, **kwargs):\nmodel_field_name = self.camel_case_to_snake_case(descriptor['meta']['model_name'])\napp_name = descriptor['meta']['app_name']\nmodel_name = descriptor['meta']['model_name']\nif model_field_name in kwargs and f'{app_name}__{model_field_name}' in kwargs:\nraise Exception(f'Exists many apps with the same model name `{model_name}`, please use '\nf'`{app_name}__{model_field_name}` instead of `{model_field_name}`')\nif model_field_name in models:\nitems = models[model_field_name] if isinstance(models[model_field_name],\nlist) else [models[model_field_name]]\nfor m in items:\nfor x in descriptor['to_one']:\nrelated_model_field_name = self.camel_case_to_snake_case(x['model_name'])\nmodel_exists = related_model_field_name in models\nis_list = isinstance(models[model_field_name], list) if model_exists else False\nif model_exists and not is_list and not getattr(models[model_field_name], x['field']):\nsetattr(m, x['field'], just_one(models[related_model_field_name]))\nif model_exists and is_list:\nfor y in models[model_field_name]:\nif getattr(y, x['field']):\nsetattr(m, x['field'], just_one(models[related_model_field_name]))\nfor x in descriptor['to_many']:\nrelated_model_field_name = self.camel_case_to_snake_case(x['model_name'])\nif related_model_field_name in models and not getattr(\nmodels[model_field_name], x['field']):\nsetattr(m, x['field'], get_list(models[related_model_field_name]))\nsetattr(m, '__mixer__', None)\nm.save()\nreturn models\ndef wrapper(*args, **kwargs):\nmodels = {}\nfor generation_round in order:\nfor app_key in generation_round:\nfor descriptor_key in descriptors[app_key]:\ndescriptor = descriptors[app_key][descriptor_key]\nattr = self.camel_case_to_snake_case(descriptor['meta']['model_name'])\nmodels = manage_model(models, descriptor, *args, **kwargs)\nif app_key not in arguments:\narguments[app_key] = {}\narguments[attr] = ...\nelse:\narguments_banned.add(attr)\narguments[f'{app_key}__{attr}'] = ...\nfor generation_round in order:\nfor app_key in generation_round:\nfor descriptor_key in descriptors[app_key]:\ndescriptor = descriptors[app_key][descriptor_key]\nattr = self.camel_case_to_snake_case(descriptor['meta']['model_name'])\nmodels = link_deferred_model(models, descriptor, *args, **kwargs)\nif app_key not in arguments:\narguments[app_key] = {}\narguments[attr] = ...\nelse:\narguments_banned.add(attr)\narguments[f'{app_key}__{attr}'] = ...\nreturn AttrDict(**models)\nreturn wrapper\ndef create_v2(self, *args, **kwargs) -&gt; dict[str, Model | list[Model]]:\n\"\"\"\n        Unstable version of mixin that create all models, do not use this.\n        \"\"\"\nmodels = self._get_models_handlers()(*args, **kwargs)\nreturn models\ndef create(self, *args, **kwargs) -&gt; dict[str, Model | list[Model]]:\n\"\"\"\n        Create one o many instances of models and return it like a dict of models.\n        Usage:\n        ```py\n        # create three users\n        self.bc.database.create(user=3)\n        # create one user with a specific first name\n        user = {'first_name': 'Lacey'}\n        self.bc.database.create(user=user)\n        # create two users with a specific first name and last name\n        users = [\n            {'first_name': 'Lacey', 'last_name': 'Sturm'},\n            {'first_name': 'The', 'last_name': 'Warning'},\n        ]\n        self.bc.database.create(user=users)\n        # create two users with the same first name\n        user = {'first_name': 'Lacey'}\n        self.bc.database.create(user=(2, user))\n        # setting up manually the relationships\n        cohort_user = {'cohort_id': 2}\n        self.bc.database.create(cohort=2, cohort_user=cohort_user)\n        ```\n        It get the model name as snake case, you can pass a `bool`, `int`, `dict`, `tuple`, `list[dict]` or\n        `list[tuple]`.\n        Behavior for type of argument:\n        - `bool`: if it is true generate a instance of a model.\n        - `int`: generate a instance of a model n times, if `n` &gt; 1 this is a list.\n        - `dict`: generate a instance of a model, this pass to mixer.blend custom values to the model.\n        - `tuple`: one element need to be a int and the other be a dict, generate a instance of a model n times,\n        if `n` &gt; 1 this is a list, this pass to mixer.blend custom values to the model.\n        - `list[dict]`: generate a instance of a model n times, if `n` &gt; 1 this is a list,\n        this pass to mixer.blend custom values to the model.\n        - `list[tuple]`: generate a instance of a model n times, if `n` &gt; 1 this is a list for each element,\n        this pass to mixer.blend custom values to the model.\n        Keywords arguments deprecated:\n        - models: this arguments is use to implement inheritance, receive as argument the output of other\n        `self.bc.database.create()` execution.\n        - authenticate: create a user and use `APITestCase.client.force_authenticate(user=models['user'])` to\n        get credentials.\n        \"\"\"\nreturn GenerateModelsMixin.generate_models(self._parent, _new_implementation=True, *args, **kwargs)\n@database_sync_to_async\ndef async_create(self, *args, **kwargs) -&gt; dict[str, Model | list[Model]]:\n\"\"\"\n        This is a wrapper for `Model.objects.count()`, get how many instances of this `Model` are saved.\n        Keywords arguments:\n        - path(`str`): path to a model, for example `admissions.CohortUser`.\n        \"\"\"\nreturn self.create(*args, **kwargs)\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.async_count","title":"<code>async_count(path)</code>","text":"<p>This is a wrapper for <code>Model.objects.count()</code>, get how many instances of this <code>Model</code> are saved.</p> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>@database_sync_to_async\ndef async_count(self, path: str) -&gt; int:\n\"\"\"\n    This is a wrapper for `Model.objects.count()`, get how many instances of this `Model` are saved.\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    \"\"\"\nreturn self.count(path)\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.async_create","title":"<code>async_create(*args, **kwargs)</code>","text":"<p>This is a wrapper for <code>Model.objects.count()</code>, get how many instances of this <code>Model</code> are saved.</p> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>@database_sync_to_async\ndef async_create(self, *args, **kwargs) -&gt; dict[str, Model | list[Model]]:\n\"\"\"\n    This is a wrapper for `Model.objects.count()`, get how many instances of this `Model` are saved.\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    \"\"\"\nreturn self.create(*args, **kwargs)\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.async_get","title":"<code>async_get(path, pk, dict=True)</code>","text":"<p>This is a wrapper for <code>Model.objects.filter(pk=pk).first()</code>, get the values of model as <code>dict</code> if <code>dict=True</code> else get the <code>Model</code> instance.</p> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>. - pk(<code>str | int</code>): primary key of model. - dict(<code>bool</code>): if true return dict of values of model else return model instance.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>@database_sync_to_async\ndef async_get(self, path: str, pk: int | str, dict: bool = True) -&gt; Model | dict[str, Any]:\n\"\"\"\n    This is a wrapper for `Model.objects.filter(pk=pk).first()`, get the values of model as `dict` if\n    `dict=True` else get the `Model` instance.\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    - pk(`str | int`): primary key of model.\n    - dict(`bool`): if true return dict of values of model else return model instance.\n    \"\"\"\nreturn self.get(path, pk, dict)\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.async_list_of","title":"<code>async_list_of(path, dict=True)</code>","text":"<p>This is a wrapper for <code>Model.objects.filter()</code>, get a list of values of models as <code>list[dict]</code> if <code>dict=True</code> else get a list of <code>Model</code> instances.</p> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>. - dict(<code>bool</code>): if true return dict of values of model else return model instance.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>@database_sync_to_async\ndef async_list_of(self, path: str, dict: bool = True) -&gt; list[Model | dict[str, Any]]:\n\"\"\"\n    This is a wrapper for `Model.objects.filter()`, get a list of values of models as `list[dict]` if\n    `dict=True` else get a list of `Model` instances.\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    - dict(`bool`): if true return dict of values of model else return model instance.\n    \"\"\"\nreturn self.list_of(path, dict)\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.count","title":"<code>count(path)</code>","text":"<p>This is a wrapper for <code>Model.objects.count()</code>, get how many instances of this <code>Model</code> are saved.</p> <p>Usage:</p> <pre><code>self.bc.database.count('admissions.Cohort')\n</code></pre> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>def count(self, path: str) -&gt; int:\n\"\"\"\n    This is a wrapper for `Model.objects.count()`, get how many instances of this `Model` are saved.\n    Usage:\n    ```py\n    self.bc.database.count('admissions.Cohort')\n    ```\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    \"\"\"\nmodel = Database.get_model(path)\nreturn model.objects.count()\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.create","title":"<code>create(*args, **kwargs)</code>","text":"<p>Create one o many instances of models and return it like a dict of models.</p> <p>Usage:</p> <pre><code># create three users\nself.bc.database.create(user=3)\n# create one user with a specific first name\nuser = {'first_name': 'Lacey'}\nself.bc.database.create(user=user)\n# create two users with a specific first name and last name\nusers = [\n{'first_name': 'Lacey', 'last_name': 'Sturm'},\n{'first_name': 'The', 'last_name': 'Warning'},\n]\nself.bc.database.create(user=users)\n# create two users with the same first name\nuser = {'first_name': 'Lacey'}\nself.bc.database.create(user=(2, user))\n# setting up manually the relationships\ncohort_user = {'cohort_id': 2}\nself.bc.database.create(cohort=2, cohort_user=cohort_user)\n</code></pre> <p>It get the model name as snake case, you can pass a <code>bool</code>, <code>int</code>, <code>dict</code>, <code>tuple</code>, <code>list[dict]</code> or <code>list[tuple]</code>.</p> <p>Behavior for type of argument:</p> <ul> <li><code>bool</code>: if it is true generate a instance of a model.</li> <li><code>int</code>: generate a instance of a model n times, if <code>n</code> &gt; 1 this is a list.</li> <li><code>dict</code>: generate a instance of a model, this pass to mixer.blend custom values to the model.</li> <li><code>tuple</code>: one element need to be a int and the other be a dict, generate a instance of a model n times, if <code>n</code> &gt; 1 this is a list, this pass to mixer.blend custom values to the model.</li> <li><code>list[dict]</code>: generate a instance of a model n times, if <code>n</code> &gt; 1 this is a list, this pass to mixer.blend custom values to the model.</li> <li><code>list[tuple]</code>: generate a instance of a model n times, if <code>n</code> &gt; 1 this is a list for each element, this pass to mixer.blend custom values to the model.</li> </ul> <p>Keywords arguments deprecated: - models: this arguments is use to implement inheritance, receive as argument the output of other <code>self.bc.database.create()</code> execution. - authenticate: create a user and use <code>APITestCase.client.force_authenticate(user=models['user'])</code> to get credentials.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>def create(self, *args, **kwargs) -&gt; dict[str, Model | list[Model]]:\n\"\"\"\n    Create one o many instances of models and return it like a dict of models.\n    Usage:\n    ```py\n    # create three users\n    self.bc.database.create(user=3)\n    # create one user with a specific first name\n    user = {'first_name': 'Lacey'}\n    self.bc.database.create(user=user)\n    # create two users with a specific first name and last name\n    users = [\n        {'first_name': 'Lacey', 'last_name': 'Sturm'},\n        {'first_name': 'The', 'last_name': 'Warning'},\n    ]\n    self.bc.database.create(user=users)\n    # create two users with the same first name\n    user = {'first_name': 'Lacey'}\n    self.bc.database.create(user=(2, user))\n    # setting up manually the relationships\n    cohort_user = {'cohort_id': 2}\n    self.bc.database.create(cohort=2, cohort_user=cohort_user)\n    ```\n    It get the model name as snake case, you can pass a `bool`, `int`, `dict`, `tuple`, `list[dict]` or\n    `list[tuple]`.\n    Behavior for type of argument:\n    - `bool`: if it is true generate a instance of a model.\n    - `int`: generate a instance of a model n times, if `n` &gt; 1 this is a list.\n    - `dict`: generate a instance of a model, this pass to mixer.blend custom values to the model.\n    - `tuple`: one element need to be a int and the other be a dict, generate a instance of a model n times,\n    if `n` &gt; 1 this is a list, this pass to mixer.blend custom values to the model.\n    - `list[dict]`: generate a instance of a model n times, if `n` &gt; 1 this is a list,\n    this pass to mixer.blend custom values to the model.\n    - `list[tuple]`: generate a instance of a model n times, if `n` &gt; 1 this is a list for each element,\n    this pass to mixer.blend custom values to the model.\n    Keywords arguments deprecated:\n    - models: this arguments is use to implement inheritance, receive as argument the output of other\n    `self.bc.database.create()` execution.\n    - authenticate: create a user and use `APITestCase.client.force_authenticate(user=models['user'])` to\n    get credentials.\n    \"\"\"\nreturn GenerateModelsMixin.generate_models(self._parent, _new_implementation=True, *args, **kwargs)\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.create_v2","title":"<code>create_v2(*args, **kwargs)</code>","text":"<p>Unstable version of mixin that create all models, do not use this.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>def create_v2(self, *args, **kwargs) -&gt; dict[str, Model | list[Model]]:\n\"\"\"\n    Unstable version of mixin that create all models, do not use this.\n    \"\"\"\nmodels = self._get_models_handlers()(*args, **kwargs)\nreturn models\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.delete","title":"<code>delete(path, pk=None)</code>","text":"<p>This is a wrapper for <code>Model.objects.filter(pk=pk).delete()</code>, delete a element if <code>pk</code> is provided else all the entries.</p> <p>Usage:</p> <pre><code># create 19110911 cohorts \ud83e\uddbe\nself.bc.database.create(cohort=19110911)\n# exists 19110911 cohorts \ud83e\uddbe\nself.assertEqual(self.bc.database.count('admissions.Cohort'), 19110911)\n# remove all the cohorts\nself.bc.database.delete(10)\n# exists 19110910 cohorts\nself.assertEqual(self.bc.database.count('admissions.Cohort'), 19110910)\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.delete--remove-all-the-cohorts","title":"remove all the cohorts","text":"<p>self.bc.database.delete()</p>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.delete--exists-0-cohorts","title":"exists 0 cohorts","text":"<p>self.assertEqual(self.bc.database.count('admissions.Cohort'), 0) ```</p> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>. - pk(<code>str | int</code>): primary key of model.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>def delete(self, path: str, pk: Optional[int | str] = None) -&gt; tuple[int, dict[str, int]]:\n\"\"\"\n    This is a wrapper for `Model.objects.filter(pk=pk).delete()`, delete a element if `pk` is provided else\n    all the entries.\n    Usage:\n    ```py\n    # create 19110911 cohorts \ud83e\uddbe\n    self.bc.database.create(cohort=19110911)\n    # exists 19110911 cohorts \ud83e\uddbe\n    self.assertEqual(self.bc.database.count('admissions.Cohort'), 19110911)\n    # remove all the cohorts\n    self.bc.database.delete(10)\n    # exists 19110910 cohorts\n    self.assertEqual(self.bc.database.count('admissions.Cohort'), 19110910)\n    ```\n    # remove all the cohorts\n    self.bc.database.delete()\n    # exists 0 cohorts\n    self.assertEqual(self.bc.database.count('admissions.Cohort'), 0)\n    ```\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    - pk(`str | int`): primary key of model.\n    \"\"\"\nlookups = {'pk': pk} if pk else {}\nmodel = Database.get_model(path)\nreturn model.objects.filter(**lookups).delete()\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.get","title":"<code>get(path, pk, dict=True)</code>","text":"<p>This is a wrapper for <code>Model.objects.filter(pk=pk).first()</code>, get the values of model as <code>dict</code> if <code>dict=True</code> else get the <code>Model</code> instance.</p> <p>Usage:</p> <pre><code># get the Cohort with the pk 1 as dict\nself.bc.database.get('admissions.Cohort', 1)\n# get the Cohort with the pk 1 as instance of model\nself.bc.database.get('admissions.Cohort', 1, dict=False)\n</code></pre> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>. - pk(<code>str | int</code>): primary key of model. - dict(<code>bool</code>): if true return dict of values of model else return model instance.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>def get(self, path: str, pk: int or str, dict: bool = True) -&gt; Model | dict[str, Any]:\n\"\"\"\n    This is a wrapper for `Model.objects.filter(pk=pk).first()`, get the values of model as `dict` if\n    `dict=True` else get the `Model` instance.\n    Usage:\n    ```py\n    # get the Cohort with the pk 1 as dict\n    self.bc.database.get('admissions.Cohort', 1)\n    # get the Cohort with the pk 1 as instance of model\n    self.bc.database.get('admissions.Cohort', 1, dict=False)\n    ```\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    - pk(`str | int`): primary key of model.\n    - dict(`bool`): if true return dict of values of model else return model instance.\n    \"\"\"\nmodel = Database.get_model(path)\nresult = model.objects.filter(pk=pk).first()\nif dict:\nresult = ModelsMixin.remove_dinamics_fields(self, result.__dict__.copy())\nreturn result\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.get_model","title":"<code>get_model(path)</code>  <code>classmethod</code>","text":"<p>Return the model matching the given app_label and model_name.</p> <p>As a shortcut, app_label may be in the form .. <p>model_name is case-insensitive.</p> <p>Raise LookupError if no application exists with this label, or no model exists with this name in the application. Raise ValueError if called with a single argument that doesn't contain exactly one dot.</p> <p>Usage:</p> <pre><code># class breathecode.admissions.models.Cohort\nCohort = self.bc.database.get_model('admissions.Cohort')\n</code></pre> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>@classmethod\ndef get_model(cls, path: str) -&gt; Model:\n\"\"\"\n    Return the model matching the given app_label and model_name.\n    As a shortcut, app_label may be in the form &lt;app_label&gt;.&lt;model_name&gt;.\n    model_name is case-insensitive.\n    Raise LookupError if no application exists with this label, or no\n    model exists with this name in the application. Raise ValueError if\n    called with a single argument that doesn't contain exactly one dot.\n    Usage:\n    ```py\n    # class breathecode.admissions.models.Cohort\n    Cohort = self.bc.database.get_model('admissions.Cohort')\n    ```\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    \"\"\"\nif path in cls._cache:\nreturn cls._cache[path]\napp_label, model_name = path.split('.')\ncls._cache[path] = apps.get_model(app_label, model_name)\nreturn cls._cache[path]\n</code></pre>"},{"location":"testing/mixins/bc-database/#breathecode.tests.mixins.breathecode_mixin.database.Database.list_of","title":"<code>list_of(path, dict=True)</code>","text":"<p>This is a wrapper for <code>Model.objects.filter()</code>, get a list of values of models as <code>list[dict]</code> if <code>dict=True</code> else get a list of <code>Model</code> instances.</p> <p>Usage:</p> <pre><code># get all the Cohort as list of dict\nself.bc.database.get('admissions.Cohort')\n# get all the Cohort as list of instances of model\nself.bc.database.get('admissions.Cohort', dict=False)\n</code></pre> <p>Keywords arguments: - path(<code>str</code>): path to a model, for example <code>admissions.CohortUser</code>. - dict(<code>bool</code>): if true return dict of values of model else return model instance.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/database.py</code> <pre><code>def list_of(self, path: str, dict: bool = True) -&gt; list[Model | dict[str, Any]]:\n\"\"\"\n    This is a wrapper for `Model.objects.filter()`, get a list of values of models as `list[dict]` if\n    `dict=True` else get a list of `Model` instances.\n    Usage:\n    ```py\n    # get all the Cohort as list of dict\n    self.bc.database.get('admissions.Cohort')\n    # get all the Cohort as list of instances of model\n    self.bc.database.get('admissions.Cohort', dict=False)\n    ```\n    Keywords arguments:\n    - path(`str`): path to a model, for example `admissions.CohortUser`.\n    - dict(`bool`): if true return dict of values of model else return model instance.\n    \"\"\"\nmodel = Database.get_model(path)\nresult = model.objects.filter()\nif dict:\nresult = [ModelsMixin.remove_dinamics_fields(self, data.__dict__.copy()) for data in result]\nreturn result\n</code></pre>"},{"location":"testing/mixins/bc-datetime/","title":"bc.datetime","text":""},{"location":"testing/mixins/bc-datetime/#breathecode.tests.mixins.breathecode_mixin.datetime.Datetime","title":"<code>Datetime</code>","text":"<p>Mixin with the purpose of cover all the related with datetime</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/datetime.py</code> <pre><code>class Datetime:\n\"\"\"Mixin with the purpose of cover all the related with datetime\"\"\"\nto_iso_string = DatetimeMixin.datetime_to_iso\nfrom_iso_string = DatetimeMixin.iso_to_datetime\nnow = DatetimeMixin.datetime_now\n_parent: APITestCase\n_bc: interfaces.BreathecodeInterface\ndef __init__(self, parent, bc: interfaces.BreathecodeInterface) -&gt; None:\nself._parent = parent\nself._bc = bc\ndef from_timedelta(self, delta=timedelta(seconds=0)) -&gt; str:\n\"\"\"\n        Transform from timedelta to the totals seconds in str.\n        Usage:\n        ```py\n        from datetime import timedelta\n        delta = timedelta(seconds=777)\n        self.bc.datetime.from_timedelta(delta)  # equals to '777.0'\n        ```\n        \"\"\"\nreturn str(delta.total_seconds())\ndef to_datetime_integer(self, timezone: str, date: datetime) -&gt; int:\n\"\"\"\n        Transform datetime to datetime integer.\n        Usage:\n        ```py\n        utc_now = timezone.now()\n        # date\n        date = datetime.datetime(2022, 3, 21, 2, 51, 55, 068)\n        # equals to 202203210751\n        self.bc.datetime.to_datetime_integer('america/new_york', date)\n        ```\n        \"\"\"\nreturn DatetimeInteger.from_datetime(timezone, date)\n</code></pre>"},{"location":"testing/mixins/bc-datetime/#breathecode.tests.mixins.breathecode_mixin.datetime.Datetime.from_timedelta","title":"<code>from_timedelta(delta=timedelta(seconds=0))</code>","text":"<p>Transform from timedelta to the totals seconds in str.</p> <p>Usage:</p> <pre><code>from datetime import timedelta\ndelta = timedelta(seconds=777)\nself.bc.datetime.from_timedelta(delta)  # equals to '777.0'\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/datetime.py</code> <pre><code>def from_timedelta(self, delta=timedelta(seconds=0)) -&gt; str:\n\"\"\"\n    Transform from timedelta to the totals seconds in str.\n    Usage:\n    ```py\n    from datetime import timedelta\n    delta = timedelta(seconds=777)\n    self.bc.datetime.from_timedelta(delta)  # equals to '777.0'\n    ```\n    \"\"\"\nreturn str(delta.total_seconds())\n</code></pre>"},{"location":"testing/mixins/bc-datetime/#breathecode.tests.mixins.breathecode_mixin.datetime.Datetime.to_datetime_integer","title":"<code>to_datetime_integer(timezone, date)</code>","text":"<p>Transform datetime to datetime integer.</p> <p>Usage:</p> <pre><code>utc_now = timezone.now()\n# date\ndate = datetime.datetime(2022, 3, 21, 2, 51, 55, 068)\n# equals to 202203210751\nself.bc.datetime.to_datetime_integer('america/new_york', date)\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/datetime.py</code> <pre><code>def to_datetime_integer(self, timezone: str, date: datetime) -&gt; int:\n\"\"\"\n    Transform datetime to datetime integer.\n    Usage:\n    ```py\n    utc_now = timezone.now()\n    # date\n    date = datetime.datetime(2022, 3, 21, 2, 51, 55, 068)\n    # equals to 202203210751\n    self.bc.datetime.to_datetime_integer('america/new_york', date)\n    ```\n    \"\"\"\nreturn DatetimeInteger.from_datetime(timezone, date)\n</code></pre>"},{"location":"testing/mixins/bc-fake/","title":"bc.fake","text":"<p>Represents a instance of Faker you can learn about it in their webside</p>"},{"location":"testing/mixins/bc-format/","title":"bc.format","text":""},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format","title":"<code>Format</code>","text":"<p>Mixin with the purpose of cover all the related with format or parse something</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>class Format:\n\"\"\"Mixin with the purpose of cover all the related with format or parse something\"\"\"\n_parent: APITestCase\n_bc: interfaces.BreathecodeInterface\nENCODE = ENCODE\ndef __init__(self, parent, bc: interfaces.BreathecodeInterface) -&gt; None:\nself._parent = parent\nself._bc = bc\ndef call(self, *args: Any, **kwargs: Any) -&gt; str:\n\"\"\"\n        Wraps a call into it and return its args and kwargs.\n        example:\n        ```py\n        args, kwargs = self.bc.format.call(2, 3, 4, a=1, b=2, c=3)\n        assert args == (2, 3, 4)\n        assert kwargs == {'a': 1, 'b': 2, 'c': 3}\n        ```\n        \"\"\"\nreturn args, kwargs\ndef querystring(self, query: dict) -&gt; str:\n\"\"\"\n        Build a querystring from a given dict.\n        \"\"\"\nreturn urllib.parse.urlencode(query)\ndef queryset(self, query: dict) -&gt; str:\n\"\"\"\n        Build a QuerySet from a given dict.\n        \"\"\"\nreturn Q(**query)\n# remove lang from args\ndef lookup(self,\nlang: str,\ncustom_fields: dict = dict(),\noverwrite: dict = dict(),\n**kwargs: dict | tuple) -&gt; dict[str, Any]:\n\"\"\"\n        Generate from lookups the values in test side to be used in querystring.\n        example:\n        ```py\n        query = self.bc.format.lookup(\n            'en',\n            strings={\n                'exact': [\n                    'remote_meeting_url',\n                ],\n            },\n            bools={\n                'is_null': ['ended_at'],\n            },\n            datetimes={\n                'gte': ['starting_at'],\n                'lte': ['ending_at'],\n            },\n            slugs=[\n                'cohort_time_slot__cohort',\n                'cohort_time_slot__cohort__academy',\n                'cohort_time_slot__cohort__syllabus_version__syllabus',\n            ],\n            overwrite={\n                'cohort': 'cohort_time_slot__cohort',\n                'academy': 'cohort_time_slot__cohort__academy',\n                'syllabus': 'cohort_time_slot__cohort__syllabus_version__syllabus',\n                'start': 'starting_at',\n                'end': 'ending_at',\n                'upcoming': 'ended_at',\n            },\n        )\n        url = reverse_lazy('events:me_event_liveclass') + '?' + self.bc.format.querystring(query)\n        # this test avoid to pass a invalid param to ORM\n        response = self.client.get(url)\n        ```\n        \"\"\"\nresult = {}\n# foreign\nids = kwargs.get('ids', tuple())\nslugs = kwargs.get('slugs', tuple())\n# fields\nints = kwargs.get('ints', dict())\nstrings = kwargs.get('strings', dict())\ndatetimes = kwargs.get('datetimes', dict())\nbools = kwargs.get('bools', dict())\n# opts\ncustom_fields = kwargs.get('custom_fields', dict())\n# serialize foreign\nids = tuple(ids)\nslugs = tuple(slugs)\noverwrite = dict([(v, k) for k, v in overwrite.items()])\n# foreign\nfor field in ids:\nif field == '':\nresult['id'] = field.integer('exact')\ncontinue\nname = overwrite.get(field, field)\nresult[name] = Field.id('')\nfor field in slugs:\nif field == '':\nresult['id'] = Field.integer('exact')\nresult['slug'] = Field.string('exact')\ncontinue\nname = overwrite.get(field, field)\nresult[name] = Field.slug('')\n# fields\nfor mode in ints:\nfor field in ints[mode]:\nname = overwrite.get(field, field)\nresult[name] = Field.int(mode)\nfor mode in strings:\nfor field in strings[mode]:\nname = overwrite.get(field, field)\nresult[name] = Field.string(mode)\nfor mode in datetimes:\nfor field in datetimes[mode]:\nname = overwrite.get(field, field)\nresult[name] = Field.datetime(mode)\nfor mode in bools:\nfor field in bools[mode]:\nname = overwrite.get(field, field)\nresult[name] = Field.bool(mode)\n# custom fields\nfor field in custom_fields:\nname = overwrite.get(field, field)\nresult[name] = custom_fields[field]()\nreturn result\ndef table(self, arg: QuerySet) -&gt; dict[str, Any] | list[dict[str, Any]]:\n\"\"\"\n        Convert a QuerySet in a list.\n        Usage:\n        ```py\n        model = self.bc.database.create(user=1, group=1)\n        self.bc.format.model(model.user.groups.all())  # = [{...}]\n        ```\n        \"\"\"\nreturn [ModelsMixin.remove_dinamics_fields(self, data.__dict__.copy()) for data in arg]\ndef to_dict(self, arg: Any) -&gt; dict[str, Any] | list[dict[str, Any]]:\n\"\"\"\n        Parse the object to a `dict` or `list[dict]`.\n        Usage:\n        ```py\n        # setup the database, model.user is instance of dict and model.cohort\n        # is instance list of dicts\n        model = self.bc.database.create(user=1, cohort=2)\n        # Parsing one model to a dict\n        self.bc.format.to_dict(model.user)  # = {...}\n        # Parsing many models to a list of dict (infered from the type of\n        # argument)\n        self.bc.format.to_dict(model.cohort)  # = [{...}, {...}]\n        ```\n        \"\"\"\nif isinstance(arg, list) or isinstance(arg, QuerySet):\nreturn [self._one_to_dict(x) for x in arg]\nreturn self._one_to_dict(arg)\ndef to_decimal_string(self, decimal: int | float) -&gt; str:\n\"\"\"\n        Parse a number to the django representation of a decimal.\n        Usage:\n        ```py\n        self.bc.format.to_decimal(1)  # returns '1.000000000000000'\n        ```\n        \"\"\"\nreturn '%.15f' % round(decimal, 15)\ndef _one_to_dict(self, arg) -&gt; dict[str, Any]:\n\"\"\"Parse the object to a `dict`\"\"\"\nif isinstance(arg, Model):\nreturn ModelsMixin.remove_dinamics_fields(None, vars(arg))\nif isinstance(arg, dict):\nreturn arg\nraise NotImplementedError(f'{arg.__name__} is not implemented yet')\ndef describe_models(self, models: dict[str, Model]) -&gt; str:\n\"\"\"\n        Describe the models.\n        Usage:\n        ```py\n        # setup the database\n        model = self.bc.database.create(user=1, cohort=1)\n        # print the docstring to the corresponding test\n        self.bc.format.describe_models(model)\n        ```\n        \"\"\"\ntitle_spaces = ' ' * 8\nmodel_spaces = ' ' * 10\nresult = {}\nfor key in models:\nmodel = models[key]\nif isinstance(model, list):\nfor v in model:\nname, obj = self._describe_model(v)\nresult[name] = obj\nelse:\nname, obj = self._describe_model(model)\nresult[name] = obj\nprint(title_spaces + 'Descriptions of models are being generated:')\nfor line in yaml.dump(result).split('\\n'):\nif not line.startswith(' '):\nprint()\nprint(model_spaces + line)\n# This make sure the element are being printed and prevent `describe_models` are pushed to dev branch\nassert False\n#TODO: this method is buggy in the line `if not hasattr(model, key)`\ndef _describe_model(self, model: Model):\npk_name = self._get_pk_name(model)\nattrs = dir(model)\nresult = {}\nfor key in attrs:\nif key.startswith('_'):\ncontinue\nif key == 'DoesNotExist':\ncontinue\nif key == 'MultipleObjectsReturned':\ncontinue\nif key.startswith('get_next_'):\ncontinue\nif key.startswith('get_previous_'):\ncontinue\nif key.endswith('_set'):\ncontinue\nif not hasattr(model, key):\ncontinue\nattr = getattr(model, key)\nif attr.__class__.__name__ == 'method':\ncontinue\nif isinstance(attr, Model):\nresult[key] = f'{attr.__class__.__name__}({self._get_pk_name(attr)}={self._repr_pk(attr.pk)})'\nelif attr.__class__.__name__ == 'ManyRelatedManager':\ninstances = [\nf'{attr.model.__name__}({self._get_pk_name(x)}={self._repr_pk(x.pk)})'\nfor x in attr.get_queryset()\n]\nresult[key] = instances\nreturn (f'{model.__class__.__name__}({pk_name}={self._repr_pk(model.pk)})', result)\ndef _repr_pk(self, pk: str | int) -&gt; int | str:\nif isinstance(pk, int):\nreturn pk\nreturn f'\"{pk}\"'\ndef _get_pk_name(self, model: Model):\nfrom django.db.models.fields import Field, SlugField\nattrs = [\nx for x in dir(model)\nif hasattr(model.__class__, x) and (isinstance(getattr(model.__class__, x), SlugField)\nor isinstance(getattr(model.__class__, x), SlugField))\nand getattr(model.__class__, x).primary_key\n]\nfor key in dir(model):\nif (hasattr(model.__class__, key) and hasattr(getattr(model.__class__, key), 'field')\nand getattr(model.__class__, key).field.primary_key):\nreturn key\nreturn 'pk'\ndef from_base64(self, hash: str | bytes) -&gt; str:\n\"\"\"\n        Transform a base64 hash to string.\n        \"\"\"\nif isinstance(hash, str):\nhash = hash.encode()\nreturn base64.b64decode(hash).decode(ENCODE)\ndef to_base64(self, string: str | bytes) -&gt; str:\n\"\"\"\n        Transform a base64 hash to string.\n        \"\"\"\nif isinstance(string, str):\nstring = string.encode()\nreturn base64.b64encode(string).decode(ENCODE)\ndef to_querystring(self, params: dict) -&gt; str:\n\"\"\"\n        Transform dict to querystring\n        \"\"\"\nreturn urllib.parse.urlencode(params)\ndef from_bytes(self, s: bytes, encode: str = ENCODE) -&gt; str:\n\"\"\"\n        Transform bytes to a string.\n        \"\"\"\nreturn s.decode(encode)\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.call","title":"<code>call(*args, **kwargs)</code>","text":"<p>Wraps a call into it and return its args and kwargs.</p> <p>example:</p> <pre><code>args, kwargs = self.bc.format.call(2, 3, 4, a=1, b=2, c=3)\nassert args == (2, 3, 4)\nassert kwargs == {'a': 1, 'b': 2, 'c': 3}\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def call(self, *args: Any, **kwargs: Any) -&gt; str:\n\"\"\"\n    Wraps a call into it and return its args and kwargs.\n    example:\n    ```py\n    args, kwargs = self.bc.format.call(2, 3, 4, a=1, b=2, c=3)\n    assert args == (2, 3, 4)\n    assert kwargs == {'a': 1, 'b': 2, 'c': 3}\n    ```\n    \"\"\"\nreturn args, kwargs\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.describe_models","title":"<code>describe_models(models)</code>","text":"<p>Describe the models.</p> <p>Usage:</p> <pre><code># setup the database\nmodel = self.bc.database.create(user=1, cohort=1)\n# print the docstring to the corresponding test\nself.bc.format.describe_models(model)\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def describe_models(self, models: dict[str, Model]) -&gt; str:\n\"\"\"\n    Describe the models.\n    Usage:\n    ```py\n    # setup the database\n    model = self.bc.database.create(user=1, cohort=1)\n    # print the docstring to the corresponding test\n    self.bc.format.describe_models(model)\n    ```\n    \"\"\"\ntitle_spaces = ' ' * 8\nmodel_spaces = ' ' * 10\nresult = {}\nfor key in models:\nmodel = models[key]\nif isinstance(model, list):\nfor v in model:\nname, obj = self._describe_model(v)\nresult[name] = obj\nelse:\nname, obj = self._describe_model(model)\nresult[name] = obj\nprint(title_spaces + 'Descriptions of models are being generated:')\nfor line in yaml.dump(result).split('\\n'):\nif not line.startswith(' '):\nprint()\nprint(model_spaces + line)\n# This make sure the element are being printed and prevent `describe_models` are pushed to dev branch\nassert False\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.from_base64","title":"<code>from_base64(hash)</code>","text":"<p>Transform a base64 hash to string.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def from_base64(self, hash: str | bytes) -&gt; str:\n\"\"\"\n    Transform a base64 hash to string.\n    \"\"\"\nif isinstance(hash, str):\nhash = hash.encode()\nreturn base64.b64decode(hash).decode(ENCODE)\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.from_bytes","title":"<code>from_bytes(s, encode=ENCODE)</code>","text":"<p>Transform bytes to a string.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def from_bytes(self, s: bytes, encode: str = ENCODE) -&gt; str:\n\"\"\"\n    Transform bytes to a string.\n    \"\"\"\nreturn s.decode(encode)\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.lookup","title":"<code>lookup(lang, custom_fields=dict(), overwrite=dict(), **kwargs)</code>","text":"<p>Generate from lookups the values in test side to be used in querystring.</p> <p>example:</p> <pre><code>query = self.bc.format.lookup(\n'en',\nstrings={\n'exact': [\n'remote_meeting_url',\n],\n},\nbools={\n'is_null': ['ended_at'],\n},\ndatetimes={\n'gte': ['starting_at'],\n'lte': ['ending_at'],\n},\nslugs=[\n'cohort_time_slot__cohort',\n'cohort_time_slot__cohort__academy',\n'cohort_time_slot__cohort__syllabus_version__syllabus',\n],\noverwrite={\n'cohort': 'cohort_time_slot__cohort',\n'academy': 'cohort_time_slot__cohort__academy',\n'syllabus': 'cohort_time_slot__cohort__syllabus_version__syllabus',\n'start': 'starting_at',\n'end': 'ending_at',\n'upcoming': 'ended_at',\n},\n)\nurl = reverse_lazy('events:me_event_liveclass') + '?' + self.bc.format.querystring(query)\n# this test avoid to pass a invalid param to ORM\nresponse = self.client.get(url)\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def lookup(self,\nlang: str,\ncustom_fields: dict = dict(),\noverwrite: dict = dict(),\n**kwargs: dict | tuple) -&gt; dict[str, Any]:\n\"\"\"\n    Generate from lookups the values in test side to be used in querystring.\n    example:\n    ```py\n    query = self.bc.format.lookup(\n        'en',\n        strings={\n            'exact': [\n                'remote_meeting_url',\n            ],\n        },\n        bools={\n            'is_null': ['ended_at'],\n        },\n        datetimes={\n            'gte': ['starting_at'],\n            'lte': ['ending_at'],\n        },\n        slugs=[\n            'cohort_time_slot__cohort',\n            'cohort_time_slot__cohort__academy',\n            'cohort_time_slot__cohort__syllabus_version__syllabus',\n        ],\n        overwrite={\n            'cohort': 'cohort_time_slot__cohort',\n            'academy': 'cohort_time_slot__cohort__academy',\n            'syllabus': 'cohort_time_slot__cohort__syllabus_version__syllabus',\n            'start': 'starting_at',\n            'end': 'ending_at',\n            'upcoming': 'ended_at',\n        },\n    )\n    url = reverse_lazy('events:me_event_liveclass') + '?' + self.bc.format.querystring(query)\n    # this test avoid to pass a invalid param to ORM\n    response = self.client.get(url)\n    ```\n    \"\"\"\nresult = {}\n# foreign\nids = kwargs.get('ids', tuple())\nslugs = kwargs.get('slugs', tuple())\n# fields\nints = kwargs.get('ints', dict())\nstrings = kwargs.get('strings', dict())\ndatetimes = kwargs.get('datetimes', dict())\nbools = kwargs.get('bools', dict())\n# opts\ncustom_fields = kwargs.get('custom_fields', dict())\n# serialize foreign\nids = tuple(ids)\nslugs = tuple(slugs)\noverwrite = dict([(v, k) for k, v in overwrite.items()])\n# foreign\nfor field in ids:\nif field == '':\nresult['id'] = field.integer('exact')\ncontinue\nname = overwrite.get(field, field)\nresult[name] = Field.id('')\nfor field in slugs:\nif field == '':\nresult['id'] = Field.integer('exact')\nresult['slug'] = Field.string('exact')\ncontinue\nname = overwrite.get(field, field)\nresult[name] = Field.slug('')\n# fields\nfor mode in ints:\nfor field in ints[mode]:\nname = overwrite.get(field, field)\nresult[name] = Field.int(mode)\nfor mode in strings:\nfor field in strings[mode]:\nname = overwrite.get(field, field)\nresult[name] = Field.string(mode)\nfor mode in datetimes:\nfor field in datetimes[mode]:\nname = overwrite.get(field, field)\nresult[name] = Field.datetime(mode)\nfor mode in bools:\nfor field in bools[mode]:\nname = overwrite.get(field, field)\nresult[name] = Field.bool(mode)\n# custom fields\nfor field in custom_fields:\nname = overwrite.get(field, field)\nresult[name] = custom_fields[field]()\nreturn result\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.queryset","title":"<code>queryset(query)</code>","text":"<p>Build a QuerySet from a given dict.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def queryset(self, query: dict) -&gt; str:\n\"\"\"\n    Build a QuerySet from a given dict.\n    \"\"\"\nreturn Q(**query)\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.querystring","title":"<code>querystring(query)</code>","text":"<p>Build a querystring from a given dict.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def querystring(self, query: dict) -&gt; str:\n\"\"\"\n    Build a querystring from a given dict.\n    \"\"\"\nreturn urllib.parse.urlencode(query)\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.table","title":"<code>table(arg)</code>","text":"<p>Convert a QuerySet in a list.</p> <p>Usage:</p> <pre><code>model = self.bc.database.create(user=1, group=1)\nself.bc.format.model(model.user.groups.all())  # = [{...}]\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def table(self, arg: QuerySet) -&gt; dict[str, Any] | list[dict[str, Any]]:\n\"\"\"\n    Convert a QuerySet in a list.\n    Usage:\n    ```py\n    model = self.bc.database.create(user=1, group=1)\n    self.bc.format.model(model.user.groups.all())  # = [{...}]\n    ```\n    \"\"\"\nreturn [ModelsMixin.remove_dinamics_fields(self, data.__dict__.copy()) for data in arg]\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.to_base64","title":"<code>to_base64(string)</code>","text":"<p>Transform a base64 hash to string.</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def to_base64(self, string: str | bytes) -&gt; str:\n\"\"\"\n    Transform a base64 hash to string.\n    \"\"\"\nif isinstance(string, str):\nstring = string.encode()\nreturn base64.b64encode(string).decode(ENCODE)\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.to_decimal_string","title":"<code>to_decimal_string(decimal)</code>","text":"<p>Parse a number to the django representation of a decimal.</p> <p>Usage:</p> <pre><code>self.bc.format.to_decimal(1)  # returns '1.000000000000000'\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def to_decimal_string(self, decimal: int | float) -&gt; str:\n\"\"\"\n    Parse a number to the django representation of a decimal.\n    Usage:\n    ```py\n    self.bc.format.to_decimal(1)  # returns '1.000000000000000'\n    ```\n    \"\"\"\nreturn '%.15f' % round(decimal, 15)\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.to_dict","title":"<code>to_dict(arg)</code>","text":"<p>Parse the object to a <code>dict</code> or <code>list[dict]</code>.</p> <p>Usage:</p> <pre><code># setup the database, model.user is instance of dict and model.cohort\n# is instance list of dicts\nmodel = self.bc.database.create(user=1, cohort=2)\n# Parsing one model to a dict\nself.bc.format.to_dict(model.user)  # = {...}\n# Parsing many models to a list of dict (infered from the type of\n# argument)\nself.bc.format.to_dict(model.cohort)  # = [{...}, {...}]\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def to_dict(self, arg: Any) -&gt; dict[str, Any] | list[dict[str, Any]]:\n\"\"\"\n    Parse the object to a `dict` or `list[dict]`.\n    Usage:\n    ```py\n    # setup the database, model.user is instance of dict and model.cohort\n    # is instance list of dicts\n    model = self.bc.database.create(user=1, cohort=2)\n    # Parsing one model to a dict\n    self.bc.format.to_dict(model.user)  # = {...}\n    # Parsing many models to a list of dict (infered from the type of\n    # argument)\n    self.bc.format.to_dict(model.cohort)  # = [{...}, {...}]\n    ```\n    \"\"\"\nif isinstance(arg, list) or isinstance(arg, QuerySet):\nreturn [self._one_to_dict(x) for x in arg]\nreturn self._one_to_dict(arg)\n</code></pre>"},{"location":"testing/mixins/bc-format/#breathecode.tests.mixins.breathecode_mixin.format.Format.to_querystring","title":"<code>to_querystring(params)</code>","text":"<p>Transform dict to querystring</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/format.py</code> <pre><code>def to_querystring(self, params: dict) -&gt; str:\n\"\"\"\n    Transform dict to querystring\n    \"\"\"\nreturn urllib.parse.urlencode(params)\n</code></pre>"},{"location":"testing/mixins/bc-random/","title":"bc.random","text":""},{"location":"testing/mixins/bc-random/#breathecode.tests.mixins.breathecode_mixin.random.Random","title":"<code>Random</code>","text":"<p>Mixin with the purpose of cover all the related with the custom asserts</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/random.py</code> <pre><code>class Random:\n\"\"\"Mixin with the purpose of cover all the related with the custom asserts\"\"\"\n_parent: APITestCase\n_bc: interfaces.BreathecodeInterface\ndef __init__(self, parent, bc: interfaces.BreathecodeInterface) -&gt; None:\nself._parent = parent\nself._bc = bc\ndef image(self, width: int = 10, height: int = 10, ext='png') -&gt; tuple[TextIOWrapper, str]:\n\"\"\"\n        Generate a random image.\n        Usage:\n        ```py\n        # generate a random image with width of 20px and height of 10px\n        file, filename = self.bc.random.image(20, 10)\n        ```\n        \"\"\"\nsize = (width, height)\nfilename = fake.slug() + f'.{ext}'\nimage = Image.new('RGB', size)\narr = np.random.randint(low=0, high=255, size=(size[1], size[0]))\nimage = Image.fromarray(arr.astype('uint8'))\nimage.save(filename, IMAGE_TYPES[ext])\nfile = open(filename, 'rb')\nself._bc.garbage_collector.register_image(file)\nreturn file, filename\ndef file(self) -&gt; tuple[TextIOWrapper, str]:\n\"\"\"\n        Generate a random file.\n        Usage:\n        ```py\n        # generate a random file\n        file, filename = self.bc.random.file()\n        ```\n        \"\"\"\next = self.string(lower=True, size=2)\nfile = tempfile.NamedTemporaryFile(suffix=f'.{ext}', delete=False)\nfile.write(os.urandom(1024))\nself._bc.garbage_collector.register_file(file)\nreturn file, file.name\ndef string(self, lower=False, upper=False, symbol=False, number=False, size=0) -&gt; str:\nchars = ''\nif lower:\nchars = chars + string.ascii_lowercase\nif upper:\nchars = chars + string.ascii_uppercase\nif symbol:\nchars = chars + string.punctuation\nif number:\nchars = chars + string.digits\nreturn ''.join(random.choices(chars, k=size))\n</code></pre>"},{"location":"testing/mixins/bc-random/#breathecode.tests.mixins.breathecode_mixin.random.Random.file","title":"<code>file()</code>","text":"<p>Generate a random file.</p> <p>Usage:</p> <pre><code># generate a random file\nfile, filename = self.bc.random.file()\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/random.py</code> <pre><code>def file(self) -&gt; tuple[TextIOWrapper, str]:\n\"\"\"\n    Generate a random file.\n    Usage:\n    ```py\n    # generate a random file\n    file, filename = self.bc.random.file()\n    ```\n    \"\"\"\next = self.string(lower=True, size=2)\nfile = tempfile.NamedTemporaryFile(suffix=f'.{ext}', delete=False)\nfile.write(os.urandom(1024))\nself._bc.garbage_collector.register_file(file)\nreturn file, file.name\n</code></pre>"},{"location":"testing/mixins/bc-random/#breathecode.tests.mixins.breathecode_mixin.random.Random.image","title":"<code>image(width=10, height=10, ext='png')</code>","text":"<p>Generate a random image.</p> <p>Usage:</p> <pre><code># generate a random image with width of 20px and height of 10px\nfile, filename = self.bc.random.image(20, 10)\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/random.py</code> <pre><code>def image(self, width: int = 10, height: int = 10, ext='png') -&gt; tuple[TextIOWrapper, str]:\n\"\"\"\n    Generate a random image.\n    Usage:\n    ```py\n    # generate a random image with width of 20px and height of 10px\n    file, filename = self.bc.random.image(20, 10)\n    ```\n    \"\"\"\nsize = (width, height)\nfilename = fake.slug() + f'.{ext}'\nimage = Image.new('RGB', size)\narr = np.random.randint(low=0, high=255, size=(size[1], size[0]))\nimage = Image.fromarray(arr.astype('uint8'))\nimage.save(filename, IMAGE_TYPES[ext])\nfile = open(filename, 'rb')\nself._bc.garbage_collector.register_image(file)\nreturn file, filename\n</code></pre>"},{"location":"testing/mixins/bc-request/","title":"bc.request","text":""},{"location":"testing/mixins/bc-request/#breathecode.tests.mixins.breathecode_mixin.request.Request","title":"<code>Request</code>","text":"<p>Mixin with the purpose of cover all the related with the request</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/request.py</code> <pre><code>class Request:\n\"\"\"Mixin with the purpose of cover all the related with the request\"\"\"\n_parent: APITestCase\ndef __init__(self, parent, bc) -&gt; None:\nself._parent = parent\nself._bc = bc\ndef set_headers(self, **kargs: str) -&gt; None:\n\"\"\"\n        Set headers.\n        ```py\n        # It set the headers with:\n        #   Academy: 1\n        #   ThingOfImportance: potato\n        self.bc.request.set_headers(academy=1, thing_of_importance='potato')\n        ```\n        \"\"\"\nheaders = {}\nitems = [\nindex for index in kargs\nif kargs[index] and (isinstance(kargs[index], str) or isinstance(kargs[index], int))\n]\nfor index in items:\nheaders[f'HTTP_{index.upper()}'] = str(kargs[index])\nself._parent.client.credentials(**headers)\ndef authenticate(self, user) -&gt; None:\n\"\"\"\n        Forces authentication in a request inside a APITestCase.\n        Usage:\n        ```py\n        # setup the database\n        model = self.bc.database.create(user=1)\n        # that setup the request to use the credential of user passed\n        self.bc.request.authenticate(model.user)\n        ```\n        Keywords arguments:\n        - user: a instance of user model `breathecode.authenticate.models.User`\n        \"\"\"\nself._parent.client.force_authenticate(user=user)\ndef manual_authentication(self, user) -&gt; None:\n\"\"\"\n        Generate a manual authentication using a token, this method is more slower than `authenticate`.\n        ```py\n        # setup the database\n        model = self.bc.database.create(user=1)\n        # that setup the request to use the credential with tokens of user passed\n        self.bc.request.manual_authentication(model.user)\n        ```\n        Keywords arguments:\n        - user: a instance of user model `breathecode.authenticate.models.User`.\n        \"\"\"\nfrom breathecode.authenticate.models import Token\ntoken = Token.objects.create(user=user)\nself._parent.client.credentials(HTTP_AUTHORIZATION=f'Token {token.key}')\n</code></pre>"},{"location":"testing/mixins/bc-request/#breathecode.tests.mixins.breathecode_mixin.request.Request.authenticate","title":"<code>authenticate(user)</code>","text":"<p>Forces authentication in a request inside a APITestCase.</p> <p>Usage:</p> <pre><code># setup the database\nmodel = self.bc.database.create(user=1)\n# that setup the request to use the credential of user passed\nself.bc.request.authenticate(model.user)\n</code></pre> <p>Keywords arguments:</p> <ul> <li>user: a instance of user model <code>breathecode.authenticate.models.User</code></li> </ul> Source code in <code>breathecode/tests/mixins/breathecode_mixin/request.py</code> <pre><code>def authenticate(self, user) -&gt; None:\n\"\"\"\n    Forces authentication in a request inside a APITestCase.\n    Usage:\n    ```py\n    # setup the database\n    model = self.bc.database.create(user=1)\n    # that setup the request to use the credential of user passed\n    self.bc.request.authenticate(model.user)\n    ```\n    Keywords arguments:\n    - user: a instance of user model `breathecode.authenticate.models.User`\n    \"\"\"\nself._parent.client.force_authenticate(user=user)\n</code></pre>"},{"location":"testing/mixins/bc-request/#breathecode.tests.mixins.breathecode_mixin.request.Request.manual_authentication","title":"<code>manual_authentication(user)</code>","text":"<p>Generate a manual authentication using a token, this method is more slower than <code>authenticate</code>.</p> <pre><code># setup the database\nmodel = self.bc.database.create(user=1)\n# that setup the request to use the credential with tokens of user passed\nself.bc.request.manual_authentication(model.user)\n</code></pre> <p>Keywords arguments:</p> <ul> <li>user: a instance of user model <code>breathecode.authenticate.models.User</code>.</li> </ul> Source code in <code>breathecode/tests/mixins/breathecode_mixin/request.py</code> <pre><code>def manual_authentication(self, user) -&gt; None:\n\"\"\"\n    Generate a manual authentication using a token, this method is more slower than `authenticate`.\n    ```py\n    # setup the database\n    model = self.bc.database.create(user=1)\n    # that setup the request to use the credential with tokens of user passed\n    self.bc.request.manual_authentication(model.user)\n    ```\n    Keywords arguments:\n    - user: a instance of user model `breathecode.authenticate.models.User`.\n    \"\"\"\nfrom breathecode.authenticate.models import Token\ntoken = Token.objects.create(user=user)\nself._parent.client.credentials(HTTP_AUTHORIZATION=f'Token {token.key}')\n</code></pre>"},{"location":"testing/mixins/bc-request/#breathecode.tests.mixins.breathecode_mixin.request.Request.set_headers","title":"<code>set_headers(**kargs)</code>","text":"<p>Set headers.</p> <pre><code># It set the headers with:\n#   Academy: 1\n#   ThingOfImportance: potato\nself.bc.request.set_headers(academy=1, thing_of_importance='potato')\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/request.py</code> <pre><code>def set_headers(self, **kargs: str) -&gt; None:\n\"\"\"\n    Set headers.\n    ```py\n    # It set the headers with:\n    #   Academy: 1\n    #   ThingOfImportance: potato\n    self.bc.request.set_headers(academy=1, thing_of_importance='potato')\n    ```\n    \"\"\"\nheaders = {}\nitems = [\nindex for index in kargs\nif kargs[index] and (isinstance(kargs[index], str) or isinstance(kargs[index], int))\n]\nfor index in items:\nheaders[f'HTTP_{index.upper()}'] = str(kargs[index])\nself._parent.client.credentials(**headers)\n</code></pre>"},{"location":"testing/mixins/bc/","title":"bc","text":""},{"location":"testing/mixins/bc/#breathecode.tests.mixins.breathecode_mixin.breathecode.Breathecode","title":"<code>Breathecode</code>","text":"<p>         Bases: <code>BreathecodeInterface</code></p> <p>Collection of mixins for testing purposes</p> Source code in <code>breathecode/tests/mixins/breathecode_mixin/breathecode.py</code> <pre><code>class Breathecode(BreathecodeInterface):\n\"\"\"Collection of mixins for testing purposes\"\"\"\ncache: Cache\nrandom: Random\ndatetime: Datetime\nrequest: Request\ndatabase: Database\ncheck: Check\nformat: Format\nfake: Faker\ngarbage_collector: GarbageCollector\n_parent: APITestCase\ndef __init__(self, parent) -&gt; None:\nself._parent = parent\nself.cache = Cache(parent, self)\nself.random = Random(parent, self)\nself.datetime = Datetime(parent, self)\nself.request = Request(parent, self)\nself.database = Database(parent, self)\nself.check = Check(parent, self)\nself.format = Format(parent, self)\nself.garbage_collector = GarbageCollector(parent, self)\nself.fake = fake\ndef help(self, *args) -&gt; None:\n\"\"\"\n        Print a list of mixin with a tree style (command of Linux).\n        Usage:\n        ```py\n        # this print a tree with all the mixins\n        self.bc.help()\n        # this print just the docs of corresponding method\n        self.bc.help('bc.datetime.now')\n        ```\n        \"\"\"\nif args:\nfor arg in args:\nself._get_doctring(arg)\nelse:\nself._help_tree()\n# prevent left a `self.bc.help()` in the code\nassert False\ndef _get_doctring(self, path: str) -&gt; None:\nparts_of_path = path.split('.')\ncurrent_path = ''\ncurrent = None\nfor part_of_path in parts_of_path:\nif not current:\nif not hasattr(self._parent, part_of_path):\ncurrent_path += f'.{part_of_path}'\nbreak\ncurrent = getattr(self._parent, part_of_path)\nelse:\nif not hasattr(current, part_of_path):\ncurrent_path += f'.{part_of_path}'\ncurrent = None\nbreak\ncurrent = getattr(current, part_of_path)\nif current:\nfrom unittest.mock import patch, MagicMock\nif callable(current):\nprint(f'self.{path}{print_arguments(current)}:')\nelse:\nprint(f'self.{path}:')\nprint()\nwith patch('sys.stdout.write', MagicMock()) as mock:\nhelp(current)\nfor args, _ in mock.call_args_list:\nif args[0] == '\\n':\nprint()\nlines = args[0].split('\\n')\nfor line in lines[3:-1]:\nprint(f'    {line}')\nelse:\nprint(f'self.{path}:')\nprint()\nprint(f'    self{current_path} not exists.')\nprint()\ndef _help_tree(self, level: int = 0, parent: Optional[dict] = None, last_item: bool = False) -&gt; list[str]:\n\"\"\"Print a list of mixin with a tree style (command of Linux)\"\"\"\nresult: list[str] = []\nif not parent:\nresult.append('bc')\nparent = [x for x in dir(parent or self) if not x.startswith('_')]\nif last_item:\nstarts = '    ' + ('\u2502   ' * (level - 1))\nelse:\nstarts = '\u2502   ' * level\nfor key in parent:\nitem = getattr(self, key)\nif callable(item):\nresult.append(f'{starts}\u251c\u2500\u2500 {key}{print_arguments(item)}')\nelse:\nresult.append(f'{starts}\u251c\u2500\u2500 {key}')\nlast_item = parent.index(key) == len(parent) - 1\nresult = [*result, *Breathecode._help_tree(item, level + 1, item, last_item)]\nresult[-1] = result[-1].replace('  \u251c\u2500\u2500 ', '  \u2514\u2500\u2500 ')\nresult[-1] = result[-1].replace(r'\u251c\u2500\u2500 ([a-zA-Z0-9]+)$', r'\u2514\u2500\u2500 \\1')\nfor n in range(len(result) - 1, -1, -1):\nif result[n][0] == '\u251c':\nresult[n] = re.sub(r'^\u251c', r'\u2514', result[n])\nbreak\nif level == 0:\nprint('\\n'.join(result))\nreturn result\n</code></pre>"},{"location":"testing/mixins/bc/#breathecode.tests.mixins.breathecode_mixin.breathecode.Breathecode.help","title":"<code>help(*args)</code>","text":"<p>Print a list of mixin with a tree style (command of Linux).</p> <p>Usage:</p> <pre><code># this print a tree with all the mixins\nself.bc.help()\n# this print just the docs of corresponding method\nself.bc.help('bc.datetime.now')\n</code></pre> Source code in <code>breathecode/tests/mixins/breathecode_mixin/breathecode.py</code> <pre><code>def help(self, *args) -&gt; None:\n\"\"\"\n    Print a list of mixin with a tree style (command of Linux).\n    Usage:\n    ```py\n    # this print a tree with all the mixins\n    self.bc.help()\n    # this print just the docs of corresponding method\n    self.bc.help('bc.datetime.now')\n    ```\n    \"\"\"\nif args:\nfor arg in args:\nself._get_doctring(arg)\nelse:\nself._help_tree()\n# prevent left a `self.bc.help()` in the code\nassert False\n</code></pre>"},{"location":"testing/mocks/mock-requests/","title":"Mock requests","text":"<p>Mocks for <code>requests</code> module</p>"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.apply_requests_delete_mock","title":"<code>apply_requests_delete_mock(endpoints=[])</code>","text":"<p>Apply a mock to <code>requests.delete</code>.</p> <p>Usage:</p> <pre><code>import requests\nfrom unittest.mock import patch, call\nfrom breathecode.tests.mocks import apply_requests_delete_mock\nfrom breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n@patch('requests.delete', apply_requests_delete_mock([\n204,\n'https://www.eventbriteapi.com/v3/events/1/structured_content/',\nNone,\n]))\ndef test_xyz():\ndelete_eventbrite_descriptions_for_event(1)\nassert requests.delete.call_args_list == [\ncall('https://www.eventbriteapi.com/v3/events/1/structured_content/',\nheaders={'Authorization': f'Bearer 1234567890'},\ndata=None),\n]\n</code></pre> Source code in <code>breathecode/tests/mocks/requests/__init__.py</code> <pre><code>def apply_requests_delete_mock(endpoints=[]):\n\"\"\"\n    Apply a mock to `requests.delete`.\n    Usage:\n    ```py\n    import requests\n    from unittest.mock import patch, call\n    from breathecode.tests.mocks import apply_requests_delete_mock\n    from breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n    @patch('requests.delete', apply_requests_delete_mock([\n        204,\n        'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n        None,\n    ]))\n    def test_xyz():\n        delete_eventbrite_descriptions_for_event(1)\n        assert requests.delete.call_args_list == [\n            call('https://www.eventbriteapi.com/v3/events/1/structured_content/',\n                headers={'Authorization': f'Bearer 1234567890'},\n                data=None),\n        ]\n    ```\n    \"\"\"\nreturn apply_requests_mock('DELETE', endpoints)\n</code></pre>"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.apply_requests_get_mock","title":"<code>apply_requests_get_mock(endpoints=[])</code>","text":"<p>Apply a mock to <code>requests.get</code>.</p> <p>Usage:</p> <pre><code>import requests\nfrom unittest.mock import patch, call\nfrom breathecode.tests.mocks import apply_requests_get_mock\nfrom breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n@patch('requests.get', apply_requests_get_mock([\n200,\n'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n{ 'data': { ... } },\n]))\ndef test_xyz():\nget_eventbrite_descriptions_for_event(1)\nassert requests.get.call_args_list == [\ncall('https://www.eventbriteapi.com/v3/events/1/structured_content/',\nheaders={'Authorization': f'Bearer 1234567890'},\ndata=None),\n]\n</code></pre> Source code in <code>breathecode/tests/mocks/requests/__init__.py</code> <pre><code>def apply_requests_get_mock(endpoints=[]):\n\"\"\"\n    Apply a mock to `requests.get`.\n    Usage:\n    ```py\n    import requests\n    from unittest.mock import patch, call\n    from breathecode.tests.mocks import apply_requests_get_mock\n    from breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n    @patch('requests.get', apply_requests_get_mock([\n        200,\n        'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n        { 'data': { ... } },\n    ]))\n    def test_xyz():\n        get_eventbrite_descriptions_for_event(1)\n        assert requests.get.call_args_list == [\n            call('https://www.eventbriteapi.com/v3/events/1/structured_content/',\n                headers={'Authorization': f'Bearer 1234567890'},\n                data=None),\n        ]\n    ```\n    \"\"\"\nreturn apply_requests_mock('GET', endpoints)\n</code></pre>"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.apply_requests_head_mock","title":"<code>apply_requests_head_mock(endpoints=[])</code>","text":"<p>Apply a mock to <code>requests.head</code>.</p> <p>Usage:</p> <pre><code>import requests\nfrom unittest.mock import patch, call\nfrom breathecode.tests.mocks import apply_requests_head_mock\nfrom breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n@patch('requests.head', apply_requests_head_mock([\n200,\n'https://www.eventbriteapi.com/v3/events/1/structured_content/',\nNone,\n]))\ndef test_xyz():\nget_meta_for_eventbrite_description_for_event(1)\nassert requests.head.call_args_list == [\ncall('https://www.eventbriteapi.com/v3/events/1/structured_content/',\nheaders={'Authorization': f'Bearer 1234567890'},\ndata=None),\n]\n</code></pre> Source code in <code>breathecode/tests/mocks/requests/__init__.py</code> <pre><code>def apply_requests_head_mock(endpoints=[]):\n\"\"\"\n    Apply a mock to `requests.head`.\n    Usage:\n    ```py\n    import requests\n    from unittest.mock import patch, call\n    from breathecode.tests.mocks import apply_requests_head_mock\n    from breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n    @patch('requests.head', apply_requests_head_mock([\n        200,\n        'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n        None,\n    ]))\n    def test_xyz():\n        get_meta_for_eventbrite_description_for_event(1)\n        assert requests.head.call_args_list == [\n            call('https://www.eventbriteapi.com/v3/events/1/structured_content/',\n                headers={'Authorization': f'Bearer 1234567890'},\n                data=None),\n        ]\n    ```\n    \"\"\"\nreturn apply_requests_mock('HEAD', endpoints)\n</code></pre>"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.apply_requests_mock","title":"<code>apply_requests_mock(method='get', endpoints=[])</code>","text":"<p>Apply Storage Blob Mock</p> Source code in <code>breathecode/tests/mocks/requests/__init__.py</code> <pre><code>def apply_requests_mock(method='get', endpoints=[]):\n\"\"\"Apply Storage Blob Mock\"\"\"\nmethod = method.lower()\nREQUESTS_INSTANCES[method] = request_mock(endpoints)\nreturn REQUESTS_INSTANCES[method]\n</code></pre>"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.apply_requests_patch_mock","title":"<code>apply_requests_patch_mock(endpoints=[])</code>","text":"<p>Apply a mock to <code>requests.patch</code>.</p> <p>Usage:</p> <pre><code>import requests\nfrom unittest.mock import patch, call\nfrom breathecode.tests.mocks import apply_requests_patch_mock\nfrom breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n@patch('requests.patch', apply_requests_patch_mock([\n200,\n'https://www.eventbriteapi.com/v3/events/1/structured_content/',\nNone,\n]))\ndef test_xyz():\npatch_eventbrite_descriptions_for_event(1)\nassert requests.patch.call_args_list == [\ncall('https://www.eventbriteapi.com/v3/events/1/structured_content/',\nheaders={'Authorization': f'Bearer 1234567890'},\ndata=None),\n]\n</code></pre> Source code in <code>breathecode/tests/mocks/requests/__init__.py</code> <pre><code>def apply_requests_patch_mock(endpoints=[]):\n\"\"\"\n    Apply a mock to `requests.patch`.\n    Usage:\n    ```py\n    import requests\n    from unittest.mock import patch, call\n    from breathecode.tests.mocks import apply_requests_patch_mock\n    from breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n    @patch('requests.patch', apply_requests_patch_mock([\n        200,\n        'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n        None,\n    ]))\n    def test_xyz():\n        patch_eventbrite_descriptions_for_event(1)\n        assert requests.patch.call_args_list == [\n            call('https://www.eventbriteapi.com/v3/events/1/structured_content/',\n                headers={'Authorization': f'Bearer 1234567890'},\n                data=None),\n        ]\n    ```\n    \"\"\"\nreturn apply_requests_mock('PATCH', endpoints)\n</code></pre>"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.apply_requests_post_mock","title":"<code>apply_requests_post_mock(endpoints=[])</code>","text":"<p>Apply a mock to <code>requests.post</code>.</p> <p>Usage:</p> <pre><code>import requests\nfrom unittest.mock import patch, call\nfrom breathecode.tests.mocks import apply_requests_post_mock\nfrom breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n@patch('requests.post', apply_requests_post_mock([\n201,\n'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n{ 'data': { ... } },\n]))\ndef test_xyz():\npost_eventbrite_descriptions_for_event(1)\nassert requests.post.call_args_list == [\ncall('https://www.eventbriteapi.com/v3/events/1/structured_content/',\nheaders={'Authorization': f'Bearer 1234567890'},\ndata=None),\n]\n</code></pre> Source code in <code>breathecode/tests/mocks/requests/__init__.py</code> <pre><code>def apply_requests_post_mock(endpoints=[]):\n\"\"\"\n    Apply a mock to `requests.post`.\n    Usage:\n    ```py\n    import requests\n    from unittest.mock import patch, call\n    from breathecode.tests.mocks import apply_requests_post_mock\n    from breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n    @patch('requests.post', apply_requests_post_mock([\n        201,\n        'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n        { 'data': { ... } },\n    ]))\n    def test_xyz():\n        post_eventbrite_descriptions_for_event(1)\n        assert requests.post.call_args_list == [\n            call('https://www.eventbriteapi.com/v3/events/1/structured_content/',\n                headers={'Authorization': f'Bearer 1234567890'},\n                data=None),\n        ]\n    ```\n    \"\"\"\nreturn apply_requests_mock('POST', endpoints)\n</code></pre>"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.apply_requests_put_mock","title":"<code>apply_requests_put_mock(endpoints=[])</code>","text":"<p>Apply a mock to <code>requests.put</code>.</p> <p>Usage:</p> <pre><code>import requests\nfrom unittest.mock import patch, call\nfrom breathecode.tests.mocks import apply_requests_put_mock\nfrom breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n@patch('requests.put', apply_requests_put_mock([\n200,\n'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n{ 'data': { ... } },\n]))\ndef test_xyz():\nput_eventbrite_descriptions_for_event(1)\nassert requests.put.call_args_list == [\ncall('https://www.eventbriteapi.com/v3/events/1/structured_content/',\nheaders={'Authorization': f'Bearer 1234567890'},\ndata=None),\n]\n</code></pre> Source code in <code>breathecode/tests/mocks/requests/__init__.py</code> <pre><code>def apply_requests_put_mock(endpoints=[]):\n\"\"\"\n    Apply a mock to `requests.put`.\n    Usage:\n    ```py\n    import requests\n    from unittest.mock import patch, call\n    from breathecode.tests.mocks import apply_requests_put_mock\n    from breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n    @patch('requests.put', apply_requests_put_mock([\n        200,\n        'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n        { 'data': { ... } },\n    ]))\n    def test_xyz():\n        put_eventbrite_descriptions_for_event(1)\n        assert requests.put.call_args_list == [\n            call('https://www.eventbriteapi.com/v3/events/1/structured_content/',\n                headers={'Authorization': f'Bearer 1234567890'},\n                data=None),\n        ]\n    ```\n    \"\"\"\nreturn apply_requests_mock('PUT', endpoints)\n</code></pre>"},{"location":"testing/mocks/mock-requests/#breathecode.tests.mocks.requests.apply_requests_request_mock","title":"<code>apply_requests_request_mock(endpoints=[])</code>","text":"<p>Apply a mock to <code>requests.request</code>.</p> <p>Usage:</p> <pre><code>import requests\nfrom unittest.mock import patch, call\nfrom breathecode.tests.mocks import apply_requests_request_mock\nfrom breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n@patch('requests.request', apply_requests_request_mock([\n200,\n'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n{ 'data': { ... } },\n]))\ndef test_xyz():\nget_eventbrite_description_for_event(1)\nassert requests.request.call_args_list == [\ncall('GET',\n'https://www.eventbriteapi.com/v3/events/1/structured_content/',\nheaders={'Authorization': f'Bearer 1234567890'},\ndata=None),\n]\n</code></pre> Source code in <code>breathecode/tests/mocks/requests/__init__.py</code> <pre><code>def apply_requests_request_mock(endpoints=[]):\n\"\"\"\n    Apply a mock to `requests.request`.\n    Usage:\n    ```py\n    import requests\n    from unittest.mock import patch, call\n    from breathecode.tests.mocks import apply_requests_request_mock\n    from breathecode.is_doesnt_exists import get_eventbrite_description_for_event\n    @patch('requests.request', apply_requests_request_mock([\n        200,\n        'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n        { 'data': { ... } },\n    ]))\n    def test_xyz():\n        get_eventbrite_description_for_event(1)\n        assert requests.request.call_args_list == [\n            call('GET',\n                'https://www.eventbriteapi.com/v3/events/1/structured_content/',\n                headers={'Authorization': f'Bearer 1234567890'},\n                data=None),\n        ]\n    ```\n    \"\"\"\nreturn apply_requests_mock('REQUEST', endpoints)\n</code></pre>"},{"location":"testing/mocks/using-mocks/","title":"Using mocks","text":""},{"location":"testing/mocks/using-mocks/#mock-object","title":"Mock object","text":"<p>Mock objects are simulated objects that mimic the behavior of real objects in controlled ways, most often as part of a software testing initiative. A programmer typically creates a mock object to test the behavior of some other object, in much the same way that a car designer uses a crash test dummy to simulate the dynamic behavior of a human in vehicle impacts.</p>"},{"location":"testing/mocks/using-mocks/#how-to-apply-a-automatic-mock","title":"How to apply a automatic mock","text":""},{"location":"testing/mocks/using-mocks/#the-most-easier-way-to-create-a-mock","title":"<code>The most easier way to create a mock</code>","text":"<p>The decorator <code>@patch.object</code> is the best option to implement a mock</p> <pre><code>@patch.object(object_class_or_module, 'method_or_function_to_be_mocked', MagicMock())\n</code></pre>"},{"location":"testing/mocks/using-mocks/#this-is-the-code-to-test","title":"<code>This is the code to test</code>","text":"<pre><code># utils.py\nfrom .actions import shoot_gun, kenny_s_birth, show\ndef kenny_killer(kenny_id: int) -&gt; None:\n# get the current kenny\nkenny = Kenny.objects.filter(id=kenny_id).first()\n# see - South Park - Coon and friends\nif kenny:\nshoot_gun(kenny)\nkenny_number = kenny_s_birth()\nshow(kenny_number)\n</code></pre>"},{"location":"testing/mocks/using-mocks/#this-is-a-example-of-use-of-mocks","title":"<code>This is a example of use of mocks</code>","text":"<pre><code>from unittest.mock import MagicMock, call, patch\nfrom rest_framework.test import APITestCase\nfrom .models import Kenny\nfrom .utils import kenny_killer\nimport app.actions as actions\n# this is a wrapper that implement the kenny_s_birth static behavior to the test\ndef kenny_s_birth_mock(number: int):\ndef kenny_s_birth():\nreturn number\n# the side_effect is a function that manage the behavior of the mocked function\nreturn MagicMock(side_effect=kenny_s_birth)\nclass KennyTestSuite(APITestCase):\n# \ud83d\udd3d this function is automatically mocked\n@patch.object(actions, 'shoot_gun', MagicMock())\n# \ud83d\udd3d this function is manually mocked\n@patch.object(actions, 'kenny_s_birth', kenny_s_birth_mock(1000))\n# \ud83d\udd3d this function is automatically mocked\n@patch.object(actions, 'show', MagicMock())\ndef test_kill_kenny(self):\nkenny = Kenny()\nkenny.save()\nkenny_killer(kenny_id=1)\n# shoot_gun() is called with a kenny instance\nself.assertEqual(actions.shoot_gun.call_args_list, [call(kenny)])\n# kenny_s_birth() is called with zero arguments\nself.assertEqual(actions.kenny_s_birth.call_args_list, [call()])\n# show is called\nself.assertEqual(actions.show.call_args_list, [call(1)])\n</code></pre>"}]}